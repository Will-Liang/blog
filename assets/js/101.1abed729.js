(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{501:function(t,e,s){"use strict";s.r(e);var n=s(2),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"依赖管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依赖管理"}},[t._v("#")]),t._v(" 依赖管理")]),t._v(" "),e("h3",{attrs:{id:"什么是依赖管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是依赖管理"}},[t._v("#")]),t._v(" 什么是依赖管理")]),t._v(" "),e("ol",[e("li",[t._v("spring-boot-starter-parent 还有父项目，声明了开发中常用的依赖的版本号。")]),t._v(" "),e("li",[t._v("并且进行"),e("strong",[t._v("自动版本仲裁")]),t._v(" ，即如果程序员没有指定某个依赖 jar 的版本，则以父项目指定的版本为准。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727091252087.png",alt:"image-20220727091252087"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727091433773.png",alt:"image-20220727091433773"}})]),t._v(" "),e("h3",{attrs:{id:"修改自动仲裁-默认版本号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改自动仲裁-默认版本号"}},[t._v("#")]),t._v(" 修改自动仲裁/默认版本号")]),t._v(" "),e("ol",[e("li",[t._v("需求说明: 将 SpringBoot mysql 驱动修改成 5.1.49")])]),t._v(" "),e("p",[t._v("方案一")]),t._v(" "),e("p",[t._v("修改 pom.xml")]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[t._v("\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--我们自己指定mysql版本--\x3e")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("mysql"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("mysql-connector-java"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5.1.49"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("方案二")]),t._v(" "),e("p",[t._v("修改 pom.xml")]),t._v(" "),e("div",{staticClass:"language-xml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-xml"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--指定mysql.version--\x3e")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("mysql.version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("5.1.49"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("mysql.version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 根据依赖就近优先原则，以自己指定的为准 --\x3e")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("mysql"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("mysql-connector-java"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("h2",{attrs:{id:"start场景启动器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start场景启动器"}},[t._v("#")]),t._v(" start场景启动器")]),t._v(" "),e("h3",{attrs:{id:"基本介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[t._v("#")]),t._v(" 基本介绍")]),t._v(" "),e("ol",[e("li",[t._v("开发中我们引入了相关场景的 starter，这个场景中所有的相关依赖都引入进来了，比如我们做 web 开发引入了，该 starter 将导入与 web 开发相关的所有包。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727092253472.png",alt:"image-20220727092253472"}})]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("依赖树：可以看到 spring-boot-starter-web ，帮我们引入了 spring-webmvc，spring-web 开发模块，还引入了 spring-boot-starter-tomcat 场景，spring-boot-starter-json 场景，这些场景下面又引入了一大堆相关的包，这些依赖项可以快速启动和运行一个项目，提高开发效率。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727085556780-16588833582071.png",alt:"image-20220727085556780"}})]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("所有场景启动器最基本的依赖就是 spring-boot-starter，前面的依赖树分析可以看到，这个依赖也就是 SpringBoot 自动配置的核心依赖。")])]),t._v(" "),e("h3",{attrs:{id:"官方提供的-starter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官方提供的-starter"}},[t._v("#")]),t._v(" 官方提供的 starter")]),t._v(" "),e("p",[t._v("地址： https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters")]),t._v(" "),e("p",[t._v("介绍：")]),t._v(" "),e("ol",[e("li",[t._v("在开发中我们经常会用到 spring-boot-starter-xxx ，比如 spring-boot-starter-web，该场景是用作 web 开发，也就是说 xxx 是某种开发场景。")]),t._v(" "),e("li",[t._v("我们只要引入 starter，这个场景的所有常规需要的依赖我们都自动引入。")])]),t._v(" "),e("h3",{attrs:{id:"第三方-starter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三方-starter"}},[t._v("#")]),t._v(" 第三方 starter")]),t._v(" "),e("ol",[e("li",[t._v("SpringBoot 也支持第三方 starter。")]),t._v(" "),e("li",[t._v("第三方 starter 不要从 spring-boot 开始，因为这是官方 spring-boot 保留的命名方式的。 第三方启动程序通常以项目名称开头。例如，名为 thirdpartyproject 的第三方启动程序项目通常被命名为 thirdpartyproject-spring-boot-starter。")]),t._v(" "),e("li",[t._v("也就是说：xxx-spring-boot-starter 是第三方为我们提供的简化开发的场景启动器。")])]),t._v(" "),e("h2",{attrs:{id:"自动配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动配置"}},[t._v("#")]),t._v(" 自动配置")]),t._v(" "),e("h3",{attrs:{id:"springboot-自动配置有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot-自动配置有哪些"}},[t._v("#")]),t._v(" SpringBoot 自动配置有哪些")]),t._v(" "),e("ol",[e("li",[t._v("自动配置 Tomcat")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727093335761.png",alt:"image-20220727093335761"}})]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("自动配置 SpringMVC")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727093426156.png",alt:"image-20220727093426156"}})]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("自动配置 Web 常用功能")])]),t._v(" "),e("p",[t._v("​\t修改 MainApp.java")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lzw"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springboot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token import"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token import"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("boot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("autoconfigure"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringBootApplication")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token import"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @author LiAng\n * @SpringBootApplication 表示这是一个 springboot应用/项目\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MainApp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//启动springboot应用程序/项目")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableApplicationContext")]),t._v(" ioc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MainApp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//查看容器中注入的组件")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" beanDefinitionNames "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ioc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinitionNames")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanDefinitionName "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" beanDefinitionNames"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinitionName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[t._v("自动配置：默认扫描包结构")])]),t._v(" "),e("p",[t._v("​\t\t官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.structuring-your-code.using-the-default-package")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727094222266.png",alt:"image-20220727094222266"}})]),t._v(" "),e("h3",{attrs:{id:"如何修改默认配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何修改默认配置"}},[t._v("#")]),t._v(" 如何修改默认配置")]),t._v(" "),e("p",[t._v("需求：要求能扫描 com.lzw 包下的 HiController.java 应该如何处理？")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220803095633890.png",alt:"image-20220803095633890"}})]),t._v(" "),e("h4",{attrs:{id:"创建-src-main-java-com-lzw-hicontroller-java"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-src-main-java-com-lzw-hicontroller-java"}},[t._v("#")]),t._v(" 创建 src/main/java/com/lzw/HiController.java")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lzw")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token import"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stereotype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Controller")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token import"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RequestMapping")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token import"}},[e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("org"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("springframework"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("web"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bind"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("annotation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResponseBody")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @author LiAng\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Controller")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HiController")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/hi"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ResponseBody")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hi")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi springboot"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("现在访问：http://localhost:8080/hi")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727094637038.png",alt:"image-20220727094637038"}})]),t._v(" "),e("h4",{attrs:{id:"修改-mainapp-java"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改-mainapp-java"}},[t._v("#")]),t._v(" 修改 MainApp.java")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n * @author LiAng\n * scanBasePackages = "com.lzw" 指定springboot要扫描的包和子包\n * 如果有多个包，可以这样 scanBasePackages = {"com.lzw","xxx.yyy.zzz"}\n */')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanBasePackages "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.lzw"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MainApp")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])]),e("p",[t._v("再次访问 http://localhost:8080/hi")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727094944678.png",alt:"image-20220727094944678"}})]),t._v(" "),e("h4",{attrs:{id:"resources-application-properties-配置大全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resources-application-properties-配置大全"}},[t._v("#")]),t._v(" resources\\application.properties 配置大全")]),t._v(" "),e("p",[t._v("SpringBoot 项目最重要也是最核心的配置文件就是 application.properties，所有的框架配置都可以在这个配置文件中说明")]),t._v(" "),e("p",[t._v("地址：https://blog.csdn.net/pbrlovejava/article/details/82659702")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("＃SPRING CONFIG（ConfigFileApplicationListener）  \nspring.config.name =＃配置文件名（默认 为  'application' ）  \nspring.config.location =＃配置文件的位置  \n \n＃ 多环境配置文件激活属性\nspring.profiles.active=dev\t\t\t\t\t＃加载application-dev.properties配置文件内容 \napplication-dev.properties：\t\t\t\t\t＃开发环境\napplication-test.properties：\t\t\t\t\t＃测试环境\napplication-prod.properties：\t\t\t\t\t＃生产环境\n \n \n＃activemq\nspring.activemq.broker-url\t\t\t\t\t\t＃指定ActiveMQ broker的URL，默认自动生成.\nspring.activemq.in-memory\t\t\t\t\t\t＃是否是内存模式，默认为true.\nspring.activemq.password\t\t\t\t\t\t＃指定broker的密码.\nspring.activemq.pooled\t\t\t\t\t\t\t＃是否创建PooledConnectionFactory，而非ConnectionFactory，默认false\nspring.activemq.user\t\t\t\t\t\t\t＃指定broker的用户.\n \n \n＃aop\nspring.aop.auto\t\t\t\t\t\t\t\t\t＃是否支持@EnableAspectJAutoProxy，默认为: true\nspring.aop.proxy-target-class\t\t\t\t\t＃true为使用CGLIB代理，false为JDK代理，默认为false\n \n \n＃application\nspring.application.admin.enabled\t\t\t\t＃是否启用admin特性，默认为: false\nspring.application.admin.jmx-name\t\t\t\t＃指定admin MBean的名称，默认为: org.springframework.boot:type=Admin,name=SpringApplication\n \n \n＃artemis(HornetQ捐献给apache后的版本)\nspring.artemis.embedded.cluster-password\t\t＃指定集群的密码，默认是启动时随机生成.\nspring.artemis.embedded.data-directory\t\t\t＃指定Journal文件的目录.如果不开始持久化则不必要指定.\nspring.artemis.embedded.enabled\t\t\t\t\t＃是否开启内嵌模式，默认true\nspring.artemis.embedded.persistent\t\t\t\t＃是否开启persistent store，默认false.\nspring.artemis.embedded.queues\t\t\t\t\t＃指定启动时创建的队列，多个用逗号分隔，默认: []\nspring.artemis.embedded.server-id\t\t\t\t＃指定Server ID. 默认是一个自增的数字，从0开始.\nspring.artemis.embedded.topics\t\t\t\t\t＃指定启动时创建的topic，多个的话逗号分隔，默认: []\nspring.artemis.host\t\t\t\t\t\t\t\t＃指定Artemis broker 的host. 默认: localhost\nspring.artemis.mode\t\t\t\t\t\t\t\t＃指定Artemis 的部署模式, 默认为auto-detected(也可以为native or embedded).\nspring.artemis.port\t\t\t\t\t\t\t\t＃指定Artemis broker 的端口，默认为: 61616\n \n \n＃autoconfig\nspring.autoconfigure.exclude\t\t\t\t\t＃配置要排除的Auto-configuration classes.\n \n \n＃batch\nspring.batch.initializer.enabled\t\t\t\t＃是否在必要时创建batch表，默认为true\nspring.batch.job.enabled\t\t\t\t\t\t＃是否在启动时开启batch job，默认为true\nspring.batch.job.names\t\t\t\t\t\t\t＃指定启动时要执行的job的名称，逗号分隔，默认所有job都会被执行\nspring.batch.schema\t\t\t\t\t\t\t\t＃指定要初始化的sql语句路径，默认:classpath:org/springframework/batch/core/schema-@@platform@@.sql)\nspring.batch.table-prefix\t\t\t\t\t\t＃指定批量处理的表的前缀.\n \n \n＃cookie、session配置\nserver.session.cookie.comment\t\t\t\t\t＃指定session cookie的comment\nserver.session.cookie.domain\t\t\t\t\t＃指定session cookie的domain\nserver.session.cookie.http-only\t\t\t\t\t＃是否开启HttpOnly.\nserver.session.cookie.max-age\t\t\t\t\t＃设定session cookie的最大age.\nserver.session.cookie.name\t\t\t\t\t\t＃设定Session cookie 的名称.\nserver.session.cookie.path\t\t\t\t\t\t＃设定session cookie的路径.\nserver.session.cookie.secure\t\t\t\t\t＃设定session cookie的“Secure” flag.\nserver.session.persistent\t\t\t\t\t\t＃重启时是否持久化session，默认false\nserver.session.timeout\t\t\t\t\t\t\t＃session的超时时间\nserver.session.tracking-modes\t\t\t\t\t＃设定Session的追踪模式(cookie, url, ssl).\n \n \n＃datasource \nspring.dao.exceptiontranslation.enabled\t\t\t＃是否开启PersistenceExceptionTranslationPostProcessor，默认为true\nspring.datasource.abandon-when-percentage-full\t＃设定超时被废弃的连接占到多少比例时要被关闭或上报\nspring.datasource.allow-pool-suspension\t\t\t＃使用Hikari pool时，是否允许连接池暂停，默认为: false\nspring.datasource.alternate-username-allowed\t＃是否允许替代的用户名.\nspring.datasource.auto-commit\t\t\t\t\t＃指定updates是否自动提交.\nspring.datasource.catalog\t\t\t\t\t\t＃指定默认的catalog.\nspring.datasource.commit-on-return\t\t\t\t＃设置当连接被归还时，是否要提交所有还未完成的事务\nspring.datasource.connection-init-sql\t\t\t＃指定连接被创建，再被添加到连接池之前执行的sql.\nspring.datasource.connection-init-sqls\t\t\t＃使用DBCP connection pool时，指定初始化时要执行的sql\nspring.datasource.connection-properties.[key]\t＃在使用DBCP connection pool时指定要配置的属性\nspring.datasource.connection-test-query\t\t\t＃指定校验连接合法性执行的sql语句\nspring.datasource.connection-timeout\t\t\t＃指定连接的超时时间，毫秒单位.\nspring.datasource.continue-on-error\t\t\t\t＃在初始化数据库时，遇到错误是否继续，默认false\nspring.datasource.data\t\t\t\t\t\t\t＃指定Data (DML)脚本\nspring.datasource.data-source-class-name\t\t＃指定数据源的全限定名.\nspring.datasource.data-source-jndi\t\t\t\t＃指定jndi的地址\nspring.datasource.data-source-properties.[key]\t＃使用Hikari connection pool时，指定要设置的属性\nspring.datasource.db-properties\t\t\t\t\t＃使用Tomcat connection pool，指定要设置的属性\nspring.datasource.default-auto-commit\t\t\t＃是否自动提交.\nspring.datasource.default-catalog\t\t\t\t＃指定连接默认的catalog.\nspring.datasource.default-read-only\t\t\t\t＃是否设置默认连接只读.\nspring.datasource.default-transaction-isolation\t＃指定连接的事务的默认隔离级别.\nspring.datasource.driver-class-name\t\t\t\t＃指定driver的类名，默认从jdbc url中自动探测.\nspring.datasource.fair-queue\t\t\t\t\t＃是否采用FIFO返回连接.\nspring.datasource.health-check-properties.[key]\t＃使用Hikari connection pool时，在心跳检查时传递的属性\nspring.datasource.idle-timeout\t\t\t\t\t＃指定连接多久没被使用时，被设置为空闲，默认为10ms\nspring.datasource.ignore-exception-on-pre-load\t＃当初始化连接池时，是否忽略异常.\nspring.datasource.init-sql\t\t\t\t\t\t＃当连接创建时，执行的sql\nspring.datasource.initial-size\t\t\t\t\t＃指定启动连接池时，初始建立的连接数量\nspring.datasource.initialization-fail-fast\t\t＃当创建连接池时，没法创建指定最小连接数量是否抛异常\nspring.datasource.initialize\t\t\t\t\t＃指定初始化数据源，是否用data.sql来初始化，默认: true\nspring.datasource.isolate-internal-queries\t\t＃指定内部查询是否要被隔离，默认为false\nspring.datasource.jdbc-interceptors\t\t\t\t＃使用Tomcat connection pool时，指定jdbc拦截器，分号分隔\nspring.datasource.jdbc-url\t\t\t\t\t\t＃指定JDBC URL.\nspring.datasource.jmx-enabled\t\t\t\t\t＃是否开启JMX，默认为: false\nspring.datasource.jndi-name\t\t\t\t\t\t＃指定jndi的名称.\nspring.datasource.leak-detection-threshold\t\t＃使用Hikari connection pool时，多少毫秒检测一次连接泄露.\nspring.datasource.log-abandoned\t\t\t\t\t＃使用DBCP connection pool，是否追踪废弃statement或连接，默认为: false\nspring.datasource.log-validation-errors\t\t\t＃当使用Tomcat connection pool是否打印校验错误.\nspring.datasource.login-timeout\t\t\t\t\t＃指定连接数据库的超时时间.\nspring.datasource.max-active\t\t\t\t\t＃指定连接池中最大的活跃连接数.\nspring.datasource.max-age\t\t\t\t\t\t＃指定连接池中连接的最大年龄\nspring.datasource.max-idle\t\t\t\t\t\t＃指定连接池最大的空闲连接数量.\nspring.datasource.max-lifetime\t\t\t\t\t＃指定连接池中连接的最大生存时间，毫秒单位.\nspring.datasource.max-open-prepared-statements\t＃指定最大的打开的prepared statements数量.\nspring.datasource.max-wait\t\t\t\t\t\t＃指定连接池等待连接返回的最大等待时间，毫秒单位.\nspring.datasource.maximum-pool-size\t\t\t\t＃指定连接池最大的连接数，包括使用中的和空闲的连接.\nspring.datasource.min-evictable-idle-time-millis\t\t＃指定一个空闲连接最少空闲多久后可被清除.\nspring.datasource.min-idle\t\t\t\t\t\t＃指定必须保持连接的最小值(For DBCP and Tomcat connection pools)\nspring.datasource.minimum-idle\t\t\t\t\t＃指定连接维护的最小空闲连接数，当使用HikariCP时指定.\nspring.datasource.name\t\t\t\t\t\t\t＃指定数据源名.\nspring.datasource.num-tests-per-eviction-run\t＃指定运行每个idle object evictor线程时的对象数量\nspring.datasource.password\t\t\t\t\t\t＃指定数据库密码.\nspring.datasource.platform\t\t\t\t\t\t＃指定schema要使用的Platform(schema-${platform}.sql)，默认为: all\nspring.datasource.pool-name\t\t\t\t\t\t＃指定连接池名字.\nspring.datasource.pool-prepared-statements\t\t＃指定是否池化statements.\nspring.datasource.propagate-interrupt-state\t\t＃在等待连接时，如果线程被中断，是否传播中断状态.\nspring.datasource.read-only\t\t\t\t\t\t＃当使用Hikari connection pool时，是否标记数据源只读\nspring.datasource.register-mbeans\t\t\t\t＃指定Hikari connection pool是否注册JMX MBeans.\nspring.datasource.remove-abandoned\t\t\t\t＃指定当连接超过废弃超时时间时，是否立刻删除该连接.\nspring.datasource.remove-abandoned-timeout\t\t＃指定连接应该被废弃的时间.\nspring.datasource.rollback-on-return\t\t\t＃在归还连接时，是否回滚等待中的事务.\nspring.datasource.schema\t\t\t\t\t\t＃指定Schema (DDL)脚本.\nspring.datasource.separator\t\t\t\t\t\t＃指定初始化脚本的语句分隔符，默认: ;\nspring.datasource.sql-script-encoding\t\t\t＃指定SQL scripts编码.\nspring.datasource.suspect-timeout\t\t\t\t＃指定打印废弃连接前的超时时间.\nspring.datasource.test-on-borrow\t\t\t\t＃当从连接池借用连接时，是否测试该连接.\nspring.datasource.test-on-connect\t\t\t\t＃创建时，是否测试连接\nspring.datasource.test-on-return\t\t\t\t＃在连接归还到连接池时是否测试该连接.\nspring.datasource.test-while-idle\t\t\t\t＃当连接空闲时，是否执行连接测试.\nspring.datasource.time-between-eviction-runs-millis    ＃指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔\nspring.datasource.transaction-isolation\t\t\t＃指定事务隔离级别，使用Hikari connection pool时指定\nspring.datasource.url\t\t\t\t\t\t\t＃指定JDBC URL.\nspring.datasource.use-disposable-connection-facade\t\t＃是否对连接进行包装，防止连接关闭之后被使用.\nspring.datasource.use-equals\t\t\t\t\t＃比较方法名时是否使用String.equals()替换==.\nspring.datasource.use-lock\t\t\t\t\t\t＃是否对连接操作加锁\nspring.datasource.username\t\t\t\t\t\t＃指定数据库名.\nspring.datasource.validation-interval\t\t\t＃指定多少ms执行一次连接校验.\nspring.datasource.validation-query\t\t\t\t＃指定获取连接时连接校验的sql查询语句.\nspring.datasource.validation-query-timeout\t\t＃指定连接校验查询的超时时间.\nspring.datasource.validation-timeout\t\t\t＃设定连接校验的超时时间，当使用Hikari connection pool时指定\nspring.datasource.validator-class-name\t\t\t＃用来测试查询的validator全限定名.\nspring.datasource.xa.data-source-class-name\t\t＃指定数据源的全限定名.\nspring.datasource.xa.properties\t\t\t\t\t＃指定传递给XA data source的属性\n＃data  springdata\nspring.data.elasticsearch.cluster-name\t\t\t＃指定es集群名称，默认: elasticsearch\nspring.data.elasticsearch.cluster-nodes\t\t\t＃指定es的集群，逗号分隔，不指定的话，则启动client node.\nspring.data.elasticsearch.properties\t\t\t＃指定要配置的es属性.\nspring.data.elasticsearch.repositories.enabled\t＃是否开启es存储，默认为: true\nspring.data.jpa.repositories.enabled\t\t\t＃是否开启JPA支持，默认为: true\nspring.data.mongodb.authentication-database\t\t＃指定鉴权的数据库名\nspring.data.mongodb.database\t\t\t\t\t＃指定mongodb数据库名\nspring.data.mongodb.field-naming-strategy\t\t＃指定要使用的FieldNamingStrategy.\nspring.data.mongodb.grid-fs-database\t\t\t＃指定GridFS database的名称.\nspring.data.mongodb.host\t\t\t\t\t\t＃指定Mongo server host.\nspring.data.mongodb.password\t\t\t\t\t＃指定Mongo server的密码.\nspring.data.mongodb.port\t\t\t\t\t\t＃指定Mongo server port.\nspring.data.mongodb.repositories.enabled\t\t＃是否开启mongodb存储，默认为true\nspring.data.mongodb.uri\t\t\t\t\t\t\t＃指定Mongo database URI.默认:mongodb://localhost/test\nspring.data.mongodb.username\t\t\t\t\t＃指定登陆mongodb的用户名.\nspring.data.rest.base-path\t\t\t\t\t\t＃指定暴露资源的基准路径.\nspring.data.rest.default-page-size\t\t\t\t＃指定每页的大小，默认为: 20\nspring.data.rest.limit-param-name\t\t\t\t＃指定limit的参数名，默认为: size\nspring.data.rest.max-page-size\t\t\t\t\t＃指定最大的页数，默认为1000\nspring.data.rest.page-param-name\t\t\t\t＃指定分页的参数名，默认为: page\nspring.data.rest.return-body-on-create\t\t\t＃当创建完实体之后，是否返回body，默认为false\nspring.data.rest.return-body-on-update\t\t\t＃在更新完实体后，是否返回body，默认为false\nspring.data.rest.sort-param-name\t\t\t\t＃指定排序使用的key，默认为: sort\nspring.data.solr.host\t\t\t\t\t\t\t＃指定Solr host，如果有指定了zk的host的话，则忽略。默认为: http://127.0.0.1:8983/solr\nspring.data.solr.repositories.enabled\t\t\t＃是否开启Solr repositories，默认为: true\nspring.data.solr.zk-host\t\t\t\t\t\t＃指定zk的地址，格式为HOST:PORT.\n＃----------------------------------------  \n＃DEVTOOLS属性  \n＃----------------------------------------  \n  \n＃DEVTOOLS（DevToolsProperties）  \nspring.devtools.livereload.enabled = true\t\t＃启用livereload.com兼容的server。  \nspring.devtools.livereload.port = 35729\t\t\t＃服务器端口。  \nspring.devtools.restart.additional-exclude =\t\t＃应该从触发完全重新启动时排除的其他模式。  \nspring.devtools.restart.additional-paths =\t\t＃额外的路径来观察变化。  \nspring.devtools.restart.enabled = true\t\t\t＃启用自动重启。  \nspring.devtools.restart.exclude = META-INF /行家/ **，META-INF /资源/ **，资源/ **，静态/ **，公共/ **，模板/ **，** / * Test.class，** / * Tests.class，git.properties＃应该排除触发完全重启的模式。  \nspring.devtools.restart.poll-interval = 1000\t＃polling 路径更改之间等待的时间（以毫秒为单位）。  \nspring.devtools.restart.quiet-period = 400\t\t＃触发重新启动之前，没有任何类路径变化所需的静默时间（以毫秒为单位）。  \nspring.devtools.restart.trigger-file =\t\t\t＃特定文件的名称，在更改时会触发重新启动检查。如果未指定任何类路径文件更改将触发重新启动。  \n  \n  \n＃DEVTOOLS   REMOTE DEVTOOLS（RemoteDevToolsProperties）  \nspring.devtools.remote.context-path =  \t\t\t＃用于处理远程连接的上下文路径。  \nspring.devtools.remote.debug.enabled = true\t\t＃启用远程调试支持。  \nspring.devtools.remote.debug.local-port = 8000\t＃本地远程调试服务器端口。  \nspring.devtools.remote.proxy.host =\t\t\t\t＃用于连接远程应用程序的代理主机。  \nspring.devtools.remote.proxy.port =\t\t\t\t＃用于连接远程应用程序的代理端口。  \nspring.devtools.remote.restart.enabled = true\t＃启用远程重启。  \nspring.devtools.remote.secret =\t\t\t\t\t＃建立连接所需的共享密钥（需要启用远程支持）。  \nspring.devtools.remote.secret-header-name = X-AUTH-TOKEN  \t\t＃用于传输共享密钥的HTTP头。  \n \n \n＃----------------------------------------  \n＃执行器属性  \n＃----------------------------------------  \n  \n＃ENDPOINTS（AbstractEndpoint子类）  \nendpoints.enabled = true\t\t\t\t\t\t＃启用端点。  \nendpoints.sensitive =\t\t\t\t\t\t\t＃默认的端点敏感设置。  \nendpoints.actuator.enabled = true\t\t\t\t＃启用端点。  \nendpoints.actuator.path =\t\t\t\t\t\t＃端点URL路径。  \nendpoints.actuator.sensitive = false\t\t\t＃在端点上启用安全性。  \nendpoints.autoconfig.enabled =\t\t\t\t\t＃启用端点。  \nendpoints.autoconfig.id =\t\t\t\t\t\t＃端点标识符。  \nendpoints.autoconfig.sensitive =\t\t\t\t＃标记端点是否暴露敏感信息。  \nendpoints.beans.enabled =\t\t\t\t\t\t＃启用端点。  \nendpoints.beans.id =\t\t\t\t\t\t\t＃端点标识符。  \nendpoints.beans.sensitive =\t\t\t\t\t\t＃标记端点是否暴露敏感信息。  \nendpoints.configprops.enabled =\t\t\t\t\t＃启用端点。  \nendpoints.configprops.id =\t\t\t\t\t\t＃端点标识符。  \nendpoints.configprops.keys-to-sanitize\t\t\t＃应该清理的密钥。键可以是属性以或正则表达式结束的简单字符串。  \nendpoints.configprops.sensitive =\t\t\t\t＃标记端点是否公开敏感信息。  \nendpoints.docs.curies.enabled = false\t\t\t＃启用居里代。  \nendpoints.docs.enabled = true\t\t\t\t\t＃启用执行器文档终结点。  \nendpoints.docs.path = / docs\t\t\t\t\t＃  \nendpoints.docs.sensitive = false\t\t\t\t＃  \n \n  \n＃终端CORS配置（EndpointCorsProperties）  \nendpoints.cors.allow-credentials =\t\t\t\t＃设置是否支持凭据。未设置时，不支持凭证。  \nendpoints.cors.allowed-headers =\t\t\t\t＃在请求中允许使用逗号分隔的标题列表。'*'允许所有标题。  \nendpoints.cors.allowed-methods = GET\t\t\t＃逗号分隔的允许的方法列表。'*'允许所有的方法。  \nendpoints.cors.allowed-origins =\t\t\t\t＃逗号分隔的起源列表允许。'*'允许所有的来源。未设置时，CORS支持被禁用。  \nendpoints.cors.exposed-headers =\t\t\t\t＃包含在响应中的逗号分隔的标题列表。  \nendpoints.cors.max-age = 1800\t\t\t\t\t＃以秒为单位，客户端可以缓存飞行前请求的响应。  \n  \n＃JMX ENDPOINT（EndpointMBeanExportProperties）  \nendpoints.jmx.domain =\t\t\t\t\t\t\t＃JMX域名。如果设置，则用“spring.jmx.default-domain”的值初始化。  \nendpoints.jmx.enabled = true\t\t\t\t\t＃启用所有端点的JMX导出。  \nendpoints.jmx.static-names =\t\t\t\t\t＃附加到所有表示端点的MBean的ObjectName的静态属性。  \nendpoints.jmx.unique-names = false\t\t\t\t＃确保ObjectNames在发生冲突时被修改。  \n \n \n＃flyway\nflyway.baseline-description \t\t\t\t\t＃对执行迁移时基准版本的描述.\nflyway.baseline-on-migrate\t\t\t\t\t\t＃当迁移时发现目标schema非空，而且带有没有元数据的表时，是否自动执行基准迁移，默认false.\nflyway.baseline-version\t\t\t\t\t\t\t＃开始执行基准迁移时对现有的schema的版本打标签，默认值为1.\nflyway.check-location\t\t\t\t\t\t\t＃检查迁移脚本的位置是否存在，默认false.\nflyway.clean-on-validation-error\t\t\t\t＃当发现校验错误时是否自动调用clean，默认false.\nflyway.enabled\t\t\t\t\t\t\t\t\t＃是否开启flywary，默认true.\nflyway.encoding\t\t\t\t\t\t\t\t\t＃设置迁移时的编码，默认UTF-8.\nflyway.ignore-failed-future-migration\t\t\t＃当读取元数据表时是否忽略错误的迁移，默认false.\nflyway.init-sqls\t\t\t\t\t\t\t\t＃当初始化好连接时要执行的SQL.\nflyway.locations\t\t\t\t\t\t\t\t＃迁移脚本的位置，默认db/migration.\nflyway.out-of-order\t\t\t\t\t\t\t\t＃是否允许无序的迁移，默认false.\nflyway.password\t\t\t\t\t\t\t\t\t＃目标数据库的密码.\nflyway.placeholder-prefix\t\t\t\t\t\t＃设置每个placeholder的前缀，默认${.\nflyway.placeholder-replacement\t\t\t\t\t＃placeholders是否要被替换，默认true.\nflyway.placeholder-suffix\t\t\t\t\t\t＃设置每个placeholder的后缀，默认}.\nflyway.placeholders.[placeholder name]\t\t\t＃设置placeholder的value\nflyway.schemas\t\t\t\t\t\t\t\t\t＃设定需要flywary迁移的schema，大小写敏感，默认为连接默认的schema.\nflyway.sql-migration-prefix\t\t\t\t\t\t＃迁移文件的前缀，默认为V.\nflyway.sql-migration-separator\t\t\t\t\t＃迁移脚本的文件名分隔符，默认__\nflyway.sql-migration-suffix\t\t\t\t\t\t＃迁移脚本的后缀，默认为.sql\nflyway.table\t\t\t\t\t\t\t\t\t＃flyway使用的元数据表名，默认为schema_version\nflyway.target\t\t\t\t\t\t\t\t\t＃迁移时使用的目标版本，默认为latest version\nflyway.url\t\t\t\t\t\t\t\t\t\t＃迁移时使用的JDBC URL，如果没有指定的话，将使用配置的主数据源\nflyway.user\t\t\t\t\t\t\t\t\t\t＃迁移数据库的用户名\nflyway.validate-on-migrate\t\t\t\t\t\t＃迁移时是否校验，默认为true.\n \n＃FREEMARKER（FreeMarkerAutoConfiguration）  \nspring.freemarker.allowRequestOverride = false   \t\t\t＃设置HttpServletRequest属性是否允许覆盖(隐藏)控制器生成的相同名称的模型属性。\nspring.freemarker.allowSessionOverride = false   \t\t\t＃设置HttpSession属性是否允许覆盖(隐藏)控制器生成的相同名称的模型属性。\t\nspring.freemarker.cache = true  \t\t\t\t \t\t\t＃使用模板缓存。\nspring.freemarker.charset=UTF-8 \t\t\t\t \t\t\t＃ Template encoding.\nspring.freemarker.checkTemplateLocation = true   \t\t\t＃检查模板位置是否存在spring.freemarker.check-template-location=true \nspring.freemarker.contentType = text / html  \t \t\t\t＃Content-Type  \nspring.freemarker.exposeRequestAttributes = false  \t\t\t＃在与模板合并之前，设置是否应该将所有请求属性添加到模型中。spring.freemarker.expose-request-attributes=false\nspring.freemarker.exposeSessionAttributes = false  \t\t\t＃在与模板合并之前，设置是否应该将所有HttpSession属性添加到模型中。spring.freemarker.expose-session-attributes=false\nspring.freemarker.exposeSpringMacroHelpers = false  \t\t＃设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用      spring.freemarker.expose-spring-macro-helpers=true\nspring.freemarker.prefer-file-system-access=true \t\t\t＃是否优先从文件系统加载template，以支持热加载，默认为true\nspring.freemarker.prefix =  \t\t\t\t\t\t\t\t＃在构建URL时，前缀被预先指定以查看名称。\nspring.freemarker.requestContextAttribute =  \t\t\t\t＃所有视图的RequestContext属性的名称.   freemarker.request-context-attribute= \nspring.freemarker.settings.* =  \t\t\t\t\t\t\t＃Well-known FreeMarker keys which will be passed to FreeMarker's Configuration\nspring.freemarker.suffix = .ftl  \t\t\t\t\t\t\t＃在构建URL时附加到视图名称后面的后缀\t\t\nspring.freemarker.templateEncoding = UTF- 8  \nspring.freemarker.templateLoaderPath =classpath:/templates  ＃设定ftl文件路径 类路径：/模板/  \nspring.freemarker.viewNames =\t\t\t\t\t\t\t\t＃可以解析的视图名称的白名单  \nspring.mvc.static-path-pattern=/static/**  \t\t\t\t\t＃设定静态文件路径，js,css等\n＃GIT信息  \nspring.git.properties =\t\t\t\t\t\t\t＃生成的git信息属性文件的资源引用。  \n＃GROOVY模板（GroovyTemplateAutoConfiguration）  \nspring.groovy.template.allow-request-override \t\t\t\t＃指定HttpServletRequest的属性是否可以覆盖controller的model的同名项\nspring.groovy.template.allow-session-override \t\t\t\t＃指定HttpSession的属性是否可以覆盖controller的model的同名项\nspring.groovy.template.cache  \t\t\t\t\t\t\t\t＃是否开启模板缓存\n.spring.groovy.template.charset \t\t\t\t\t\t\t＃指定Template编码\n.spring.groovy.template.check-template-location \t\t\t＃是否检查模板的路径是否存在.\nspring.groovy.template.configuration.auto-escape \t\t\t＃是否在渲染模板时自动排查model的变量，默认为: false\nspring.groovy.template.configuration.auto-indent \t\t\t＃是否在渲染模板时自动缩进，默认为false\nspring.groovy.template.configuration.auto-indent-string \t＃如果自动缩进启用的话，是使用SPACES还是TAB，默认为: SPACES\nspring.groovy.template.configuration.auto-new-line \t\t\t＃渲染模板时是否要输出换行，默认为false\nspring.groovy.template.configuration.base-template-class \t＃指定template base class.\nspring.groovy.template.configuration.cache-templates \t\t＃是否要缓存模板，默认为true\nspring.groovy.template.configuration.declaration-encoding \t＃在写入declaration header时使用的编码\nspring.groovy.template.configuration.expand-empty-elements \t＃是使用<br/>这种形式，还是<br></br>这种展开模式，默认为: false)\nspring.groovy.template.configuration.locale \t\t\t\t＃指定template locale.\nspring.groovy.template.configuration.new-line-string \t\t＃当启用自动换行时，换行的输出，默认为系统的line.separator属性的值\nspring.groovy.template.configuration.resource-loader-path \t＃指定groovy的模板路径，默认为classpath:/templates/\nspring.groovy.template.configuration.use-double-quotes \t\t＃指定属性要使用双引号还是单引号，默认为false\nspring.groovy.template.content-type \t\t\t\t\t\t＃指定Content-Type.\nspring.groovy.template.enabled \t\t\t\t\t\t\t\t＃是否开启groovy模板的支持.\nspring.groovy.template.expose-request-attributes \t\t\t＃设定所有request的属性在merge到模板的时候，是否要都添加到model中.\nspring.groovy.template.expose-session-attributes \t\t\t＃设定所有request的属性在merge到模板的时候，是否要都添加到model中.\nspring.groovy.template.expose-spring-macro-helpers \t\t\t＃设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用\nspring.groovy.template.prefix \t\t\t\t\t\t\t\t＃指定模板的前缀.\nspring.groovy.template.request-context-attribute \t\t\t＃指定RequestContext属性的名.\nspring.groovy.template.resource-loader-path\t\t\t\t \t＃指定模板的路径，默认为: classpath:/templates/\nspring.groovy.template.suffix\t\t\t\t\t\t\t\t＃指定模板的后缀\nspring.groovy.template.view-names \t\t\t\t\t\t\t＃指定要使用模板的视图名称.\n＃h2\nspring.h2.console.enabled\t\t\t\t\t\t＃是否开启控制台，默认为false\nspring.h2.console.path\t\t\t\t\t\t\t＃指定控制台路径，默认为: /h2-console\n＃hornetq\t(HornetQProperties）  \nspring.hornetq.embedded.cluster-password\t\t＃指定集群的密码，默认启动时随机生成.\nspring.hornetq.embedded.data-directory\t\t\t＃指定Journal file 的目录. 如果不开启持久化则不必指定.\nspring.hornetq.embedded.enabled\t\t\t\t\t＃是否开启内嵌模式，默认:true\nspring.hornetq.embedded.persistent\t\t\t\t＃是否开启persistent store，默认: false\nspring.hornetq.embedded.queues\t\t\t\t\t＃指定启动是创建的queue，多个以逗号分隔，默认: []\nspring.hornetq.embedded.server-id\t\t\t\t＃指定Server ID. 默认使用自增数字，从0开始.\nspring.hornetq.embedded.topics\t\t\t\t\t＃指定启动时创建的topic，多个以逗号分隔，默认: []\nspring.hornetq.host\t\t\t\t\t\t\t\t＃指定HornetQ broker 的host，默认: localhost\nspring.hornetq.mode\t\t\t\t\t\t\t\t＃指定HornetQ 的部署模式，默认是auto-detected，也可以指定native 或者 embedded.\nspring.hornetq.port\t\t\t\t\t\t\t\t＃指定HornetQ broker 端口，默认: 5445\n＃http\nspring.hateoas.apply-to-primary-object-mapper   ＃设定是否对object mapper也支持HATEOAS，默认为: true\nspring.http.converters.preferred-json-mapper   \t＃是否优先使用JSON mapper来转换.\nspring.http.encoding.charset \t\t\t\t\t＃指定http请求和相应的Charset，默认: UTF-8\nspring.http.encoding.enabled\t\t\t\t\t＃是否开启http的编码支持，默认为true\nspring.http.encoding.force\t\t\t\t\t\t＃是否强制对http请求和响应进行编码，默认为true\n＃jersey\nspring.jersey.filter.order \t\t\t\t\t\t＃指定Jersey filter的order，默认为: 0\nspring.jersey.init\t\t\t\t\t\t\t\t＃指定传递给Jersey的初始化参数.\nspring.jersey.type\t\t\t\t\t\t\t\t＃指定Jersey的集成类型，可以是servlet或者filter.\n＃jms\nspring.jms.jndi-name\t\t\t\t\t\t\t＃指定Connection factory JNDI 名称.\nspring.jms.listener.acknowledge-mode\t\t\t＃指定ack模式，默认自动ack.\nspring.jms.listener.auto-startup\t\t\t\t＃是否启动时自动启动jms，默认为: true\nspring.jms.listener.concurrency\t\t\t\t\t＃指定最小的并发消费者数量.\nspring.jms.listener.max-concurrency\t\t\t\t＃指定最大的并发消费者数量.\nspring.jms.pub-sub-domain\t\t\t\t\t\t＃是否使用默认的destination type来支持 publish/subscribe，默认: false\njmx\nspring.jmx.default-domain\t\t\t\t\t\t＃指定JMX domain name.\nspring.jmx.enabled\t\t\t\t\t\t\t\t＃是否暴露jmx，默认为true\nspring.jmx.server\t\t\t\t\t\t\t\t＃指定MBeanServer bean name. 默认为: mbeanServer)\n＃jooq\nspring.jooq.sql-dialect\t\t\t\t\t\t\t＃指定JOOQ使用的SQLDialect，比如POSTGRES.\n＃Messages\nspring.messages.basename\t\t \t\t\t\t\t\t\t＃指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始，默认: messages\nspring.messages.cache-seconds\t \t\t\t\t\t\t\t＃设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1\nspring.messages.encoding    \t\t\t \t\t\t\t\t＃设定Message bundles的编码，默认: UTF-8\n＃JPA\nspring.jpa.database\t\t\t\t\t\t\t\t＃指定目标数据库.\nspring.jpa.database-platform\t\t\t\t\t＃指定目标数据库的类型.\nspring.jpa.generate-ddl\t\t\t\t\t\t\t＃是否在启动时初始化schema，默认为false\nspring.jpa.hibernate.ddl-auto\t\t\t\t\t＃指定DDL mode (none, validate, update, create, create-drop). 当使用内嵌数据库时，默认是create-drop，否则为none.\nspring.jpa.hibernate.naming-strategy\t\t\t＃指定命名策略.\nspring.jpa.open-in-view\t\t\t\t\t\t\t＃是否注册OpenEntityManagerInViewInterceptor，绑定JPA EntityManager到请求线程中，默认为: true\nspring.jpa.properties\t\t\t\t\t\t\t＃添加额外的属性到JPA provider.\nspring.jpa.show-sql\t\t\t\t\t\t\t\t＃是否开启sql的log，默认为: false\n＃json\nspring.jackson.date-format\t\t\t\t\t\t＃指定日期格式，比如yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名\nspring.jackson.deserialization\t\t\t\t\t＃是否开启Jackson的反序列化\nspring.jackson.generator\t\t\t\t\t\t＃是否开启json的generators.\nspring.jackson.joda-date-time-format\t\t\t＃指定Joda date/time的格式，比如yyyy-MM-dd HH:mm:ss). 如果没有配置的话，dateformat会作为backup\nspring.jackson.locale\t\t\t\t\t\t\t＃指定json使用的Locale.\nspring.jackson.mapper\t\t\t\t\t\t\t＃是否开启Jackson通用的特性.\nspring.jackson.parser\t\t\t\t\t\t\t＃是否开启jackson的parser特性.\nspring.jackson.property-naming-strategy\t\t\t＃指定PropertyNamingStrategy (CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)或者指定PropertyNamingStrategy子类的全限定类名.\nspring.jackson.serialization\t\t\t\t\t＃是否开启jackson的序列化.\nspring.jackson.serialization-inclusion\t\t\t＃指定序列化时属性的inclusion方式，具体查看JsonInclude.Include枚举.\nspring.jackson.time-zone\t\t\t\t\t\t＃指定日期格式化时区，比如America/Los_Angeles或者GMT+10.\n＃JTA\nspring.jta.allow-multiple-lrc\t\t\t\t\t＃是否允许 multiple LRC，默认为: false\nspring.jta.asynchronous2-pc\t\t\t\t\t\t＃指定两阶段提交是否可以异步，默认为: false\nspring.jta.background-recovery-interval\t\t\t＃指定多少分钟跑一次recovery process，默认为: 1\nspring.jta.background-recovery-interval-seconds\t＃指定多久跑一次recovery process，默认: 60\nspring.jta.current-node-only-recovery\t\t\t＃是否过滤掉其他非本JVM的recovery，默认为: true\nspring.jta.debug-zero-resource-transaction\t\t＃是否追踪没有使用指定资源的事务，默认为: false\nspring.jta.default-transaction-timeout\t\t\t＃设定默认的事务超时时间，默认为60\nspring.jta.disable-jmx\t\t\t\t\t\t\t＃是否禁用jmx，默认为false\nspring.jta.enabled\t\t\t\t\t\t\t\t＃是否开启JTA support，默认为: true\nspring.jta.exception-analyzer\t\t\t\t\t＃设置指定的异常分析类\nspring.jta.filter-log-status\t\t\t\t\t＃使用Bitronix Transaction Manager时，是否写mandatory logs，开启的话，可以节省磁盘空间，但是调试会复杂写，默认为false\nspring.jta.force-batching-enabled\t\t\t\t＃使用Bitronix Transaction Manager时，是否批量写磁盘，默认为true.\nspring.jta.forced-write-enabled\t\t\t\t\t＃使用Bitronix Transaction Manager时，是否强制写日志到磁盘，默认为true\nspring.jta.graceful-shutdown-interval\t\t\t＃当使用Bitronix Transaction Manager，指定shutdown时等待事务结束的时间，超过则中断，默认为60\nspring.jta.jndi-transaction-synchronization-registry-name\t\t＃当使用Bitronix Transaction Manager时，在JNDI下得事务同步registry，默认为: java:comp/TransactionSynchronizationRegistry\nspring.jta.jndi-user-transaction-name\t\t\t＃指定在JNDI使用Bitronix Transaction Manager的名称，默认:java:comp/UserTransaction\nspring.jta.journal\t\t\t\t\t\t\t\t＃当使用Bitronix Transaction Manager，指定The journal是否disk还是null还是一个类的全限定名，默认disk\nspring.jta.log-dir\t\t\t\t\t\t\t\t＃Transaction logs directory.\nspring.jta.log-part1-filename\t\t\t\t\t＃指定The journal fragment文件1的名字，默认: btm1.tlog\nspring.jta.log-part2-filename\t\t\t\t\t＃指定The journal fragment文件2的名字，默认: btm2.tlog\nspring.jta.max-log-size-in-mb\t\t\t\t\t＃指定journal fragments大小的最大值. 默认: 2M\nspring.jta.resource-configuration-filename\t\t＃指定Bitronix Transaction Manager配置文件名.\nspring.jta.server-id\t\t\t\t\t\t\t＃指定Bitronix Transaction Manager实例的id.\nspring.jta.skip-corrupted-logs\t\t\t\t\t＃是否忽略corrupted log files文件，默认为false.\nspring.jta.transaction-manager-id\t\t\t\t＃指定Transaction manager的唯一标识.\nspring.jta.warn-about-zero-resource-transaction\t＃当使用Bitronix Transaction Manager时，是否对没有使用指定资源的事务进行警告，默认为: true\n＃mail\nspring.mail.default-encoding\t\t\t\t\t＃指定默认MimeMessage的编码，默认为: UTF-8\nspring.mail.host\t\t\t\t\t\t\t\t＃指定SMTP server host.\nspring.mail.jndi-name\t\t\t\t\t\t\t＃指定mail的jndi名称\nspring.mail.password\t\t\t\t\t\t\t＃指定SMTP server登陆密码.\nspring.mail.port\t\t\t\t\t\t\t\t＃指定SMTP server port.\nspring.mail.properties\t\t\t\t\t\t\t＃指定JavaMail session属性.\nspring.mail.protocol\t\t\t\t\t\t\t＃指定SMTP server使用的协议，默认为: smtp\nspring.mail.test-connection\t\t\t\t\t\t＃指定是否在启动时测试邮件服务器连接，默认为false\nspring.mail.username\t\t\t\t\t\t\t＃指定SMTP server的用户名.\n＃mobile\nspring.mobile.devicedelegatingviewresolver.enable-fallback\t＃是否支持fallback的解决方案，默认false\nspring.mobile.devicedelegatingviewresolver.enabled\t\t\t＃是否开始device view resolver，默认为: false\nspring.mobile.devicedelegatingviewresolver.mobile-prefix\t＃设定mobile端视图的前缀，默认为:mobile/\nspring.mobile.devicedelegatingviewresolver.mobile-suffix\t＃设定mobile视图的后缀\nspring.mobile.devicedelegatingviewresolver.normal-prefix\t＃设定普通设备的视图前缀\nspring.mobile.devicedelegatingviewresolver.normal-suffix\t＃设定普通设备视图的后缀\nspring.mobile.devicedelegatingviewresolver.tablet-prefix\t＃设定平板设备视图前缀，默认:tablet/\nspring.mobile.devicedelegatingviewresolver.tablet-suffix\t＃设定平板设备视图后缀.\nspring.mobile.sitepreference.enabled\t\t\t\t\t\t＃是否启用SitePreferenceHandler，默认为: true\n＃MONGODB（Mongo性能）  \nspring.data.mongodb.host =\t\t\t\t\t\t＃分贝主机  \nspring.data.mongodb.port = 27017  \t\t\t\t＃连接端口（默认为  27107 ）  \nspring.data.mongodb.uri = \t\t\t\t\t\t＃连接URL  \nspring.mongodb.embedded.features\t\t\t\t＃指定要开启的特性，逗号分隔.\nspring.mongodb.embedded.version\t\t\t\t\t＃指定要使用的版本，默认: 2.6.10\n＃MANAGEMENT HTTP SERVER（ManagementServerProperties）  \nmanagement.add-application-context-header = true＃在每个响应中添加“X-Application-Context”HTTP标头。  \nmanagement.address =\t\t\t\t\t\t\t＃管理端点应该绑定的网络地址。  \nmanagement.context-path =\t\t\t\t\t\t＃管理端点上下文路径。例如`/执行器`  \nmanagement.port =\t\t\t\t\t\t\t\t＃管理端点HTTP端口。默认使用与应用程序相同的端口。  \nmanagement.security.enabled = true\t\t\t\t＃启用\nmanagement.security.role = ADMIN\t\t\t\t＃访问管理端点所需的角色。  \nmanagement.security.sessions \t\t\t\t\t＃会话创建策略使用（always, never, if_required, stateless）。  \n  \n＃HEALTH INDICATORS健康指标（以前的健康状况*）  \nmanagement.health.db.enabled = true\t\t\t\t＃启用数据库运行状况检查。  \nmanagement.health.defaults.enabled = true\t\t＃启用默认健康指标。  \nmanagement.health.diskspace.enabled = true\t\t＃启用磁盘空间运行状况检查。  \nmanagement.health.diskspace.path =\t\t\t\t＃用于计算可用磁盘空间的路径。  \nmanagement.health.diskspace.threshold = 0\t\t＃应该可用的最小磁盘空间（以字节为单位）。  \nmanagement.health.elasticsearch.enabled = true\t＃启用elasticsearch运行状况检查。  \nmanagement.health.elasticsearch.indices =\t\t＃逗号分隔的索引名称。  \nmanagement.health.elasticsearch.response-timeout = 100\t\t＃等待群集响应的时间（以毫秒为单位）。  \nmanagement.health.jms.enabled = true\t\t\t＃启用JMS运行状况检查。  \nmanagement.health.mail.enabled = true\t\t\t＃启用邮件运行状况检查。  \nmanagement.health.mongo.enabled = true\t\t\t＃启用MongoDB运行状况检查。  \nmanagement.health.rabbit.enabled = true\t\t\t＃启用RabbitMQ健康检查。  \nmanagement.health.redis.enabled = true\t\t\t＃启用Redis运行状况检查。  \nmanagement.health.solr.enabled = true\t\t\t＃启用Solr运行状况检查。  \nmanagement.health.status.order \t\t\t\t\t＃以逗号分隔的健康状态列表。  \nmanagement.trace.include \t\t\t\t\t\t＃要包含在跟踪中的项目。  \n＃METRICS EXPORT（MetricExportProperties）  \nspring.metrics.export.aggregate.key-pattern =\t＃告诉聚合器如何处理源存储库中的密钥的模式。  \nspring.metrics.export.aggregate.prefix =\t\t＃全局存储库的前缀（如果处于活动状态）。  \nspring.metrics.export.delay-millis = 5000\t\t＃输出滴答之间的延迟（以毫秒为单位）。度量标准按照计划导出到外部源。  \nspring.metrics.export.enabled = true\t\t\t＃启用metric 标准导出的标志（假设MetricWriter可用）。  \nspring.metrics.export.excludes =\t\t\t\t＃要排除的metric 标准名称的模式列表。包括后应用。  \nspring.metrics.export.includes =\t\t\t\t＃要包含的metric 标准名称的模式列表。  \nspring.metrics.export.redis.key \t\t\t\t＃Redis存储库导出密钥（如果有效）。  \nspring.metrics.export.redis.prefix\t\t\t\t＃如果处于活动状态，redis存储库的前缀。  \nspring.metrics.export.send-latest \t\t\t\t＃根据不导出不变的metric 值的标志关闭所有可用的优化。  \nspring.metrics.export.statsd.host =\t\t\t\t＃接收导出metric 的statsd server的主机。  \nspring.metrics.export.statsd.port = 8125\t\t＃接收导出metric的statsd server的端口。  \nspring.metrics.export.statsd.prefix =\t\t\t＃统计导出metric的前缀。  \nspring.metrics.export.triggers。* =\t\t\t\t＃每个MetricWriter bean名称的特定触发器属性。  \n＃multipart\nmultipart.enabled\t\t\t\t\t\t\t\t＃是否开启文件上传支持，默认为true\nmultipart.file-size-threshold\t\t\t\t\t＃设定文件写入磁盘的阈值，单位为MB或KB，默认为0\nmultipart.location\t\t\t\t\t\t\t\t＃指定文件上传路径.\nmultipart.max-file-size\t\t\t\t\t\t\t＃指定文件大小最大值，默认1MB\nmultipart.max-request-size\t\t\t\t\t\t＃指定每次请求的最大值，默认为10MB\n＃mustcache\nspring.mustache.cache\t\t\t\t\t\t\t＃是否Enable template caching.\nspring.mustache.charset\t\t\t\t\t\t\t＃指定Template的编码.\nspring.mustache.check-template-location\t\t\t＃是否检查默认的路径是否存在.\nspring.mustache.content-type\t\t\t\t\t＃指定Content-Type.\nspring.mustache.enabled\t\t\t\t\t\t\t＃是否开启mustcache的模板支持.\nspring.mustache.prefix\t\t\t\t\t\t\t＃指定模板的前缀，默认: classpath:/templates/\nspring.mustache.suffix\t\t\t\t\t\t\t＃指定模板的后缀，默认: .html\nspring.mustache.view-names\t\t\t\t\t\t＃指定要使用模板的视图名.\n＃MVC（SPRING MVC相关的一些配置）  \nhttp.mappers.json-pretty-print = false  \t\t\t\t\t＃打印JSON  \nhttp.mappers.json-sort-keys = false  \t\t\t\t\t\t＃排序键  \nspring.mvc.locale =\t\t\t\t\t\t\t\t\t\t\t＃设置固定语言环境，例如en_UK  \nspring.mvc.date-format =\t\t\t\t\t\t\t\t\t＃设置固定的日期格式，例如dd / MM / yyyy  \nspring.mvc.async.request-timeout\t \t\t\t\t\t\t＃设定async请求的超时时间，以毫秒为单位，如果没有设置的话，以具体实现的超时时间为准，比如tomcat的servlet3的话是10秒.\nspring.mvc.favicon.enabled \t\t\t\t\t\t\t\t\t＃是否支持favicon.ico，默认为: true\nspring.mvc.ignore-default-model-on-redirect  \t\t\t\t＃在重定向时是否忽略默认model的内容，默认为true\nspring.mvc.locale＃指定使用的Locale.\nspring.mvc.message-codes-resolver-format \t\t\t\t\t＃指定message codes的格式化策略(PREFIX_ERROR_CODE,POSTFIX_ERROR_CODE).\nspring.view.prefix =   \t\t\t\t\t\t\t\t\t\t＃MVC视图前缀  \nspring.view.suffix =   \t\t\t\t\t\t\t\t\t\t＃...和后缀  \t\nspring.resources.cache-period =             \t\t\t\t＃发送到浏览器的标题缓存超时  \nspring.resources.add-mappings = true         \t\t\t\t＃如果 应该添加默认映射   \n＃liquibase\nliquibase.change-log\t\t\t\t\t\t\t＃Change log 配置文件的路径，默认值为classpath:/db/changelog/db.changelog-master.yaml\nliquibase.check-change-log-location\t\t\t\t＃是否坚持change log的位置是否存在，默认为true.\nliquibase.contexts\t\t\t\t\t\t\t\t＃逗号分隔的运行时context列表.\nliquibase.default-schema\t\t\t\t\t\t＃默认的schema.\nliquibase.drop-first\t\t\t\t\t\t\t＃是否首先drop schema，默认为false\nliquibase.enabled\t\t\t\t\t\t\t\t＃是否开启liquibase，默认为true.\nliquibase.password\t\t\t\t\t\t\t\t＃目标数据库密码\nliquibase.url\t\t\t\t\t\t\t\t\t＃要迁移的JDBC URL，如果没有指定的话，将使用配置的主数据源.\nliquibase.user\t\t\t\t\t\t\t\t\t＃目标数据用户名\n＃logging日志\nlogging.path =  \t\t\t\t\t\t\t＃文件路径\nlogging.file = myapp.log   \t\t\t\t\t＃文件名称\nlogging.config =\t\t\t\t\t\t\t＃如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以通过logging.config属性指定自定义的名字\nlogging.level.root=INFO  \t\t\t\t\t＃日志级别  从控制台打印出来的日志级别只有ERROR, WARN 还有INFO，如果你想要打印debug级别的日志，可以配置debug=true\nlogging.level.org.springframework.web=DEBUG\nlogging.level.org.hibernate=ERROR\t\t\t\t\t\t\t\t\t\n＃rabbitmq\nspring.rabbitmq.addresses\t\t\t\t\t\t＃指定client连接到的server的地址，多个以逗号分隔.\nspring.rabbitmq.dynamic\t\t\t\t\t\t\t＃是否创建AmqpAdmin bean. 默认为: true)\nspring.rabbitmq.host\t\t\t\t\t\t\t＃指定RabbitMQ host.默认为: localhost)\nspring.rabbitmq.listener.acknowledge-mode\t\t＃指定Acknowledge的模式.\nspring.rabbitmq.listener.auto-startup\t\t\t＃是否在启动时就启动mq，默认: true)\nspring.rabbitmq.listener.concurrency\t\t\t＃指定最小的消费者数量.\nspring.rabbitmq.listener.max-concurrency\t\t＃指定最大的消费者数量.\nspring.rabbitmq.listener.prefetch\t\t\t\t＃指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量.\nspring.rabbitmq.listener.transaction-size\t\t＃指定一个事务处理的消息数量，最好是小于等于prefetch的数量.\nspring.rabbitmq.password\t\t\t\t\t\t＃指定broker的密码.\nspring.rabbitmq.port\t\t\t\t\t\t\t＃指定RabbitMQ 的端口，默认: 5672)\nspring.rabbitmq.requested-heartbeat\t\t\t\t＃指定心跳超时，0为不指定.\nspring.rabbitmq.ssl.enabled\t\t\t\t\t\t＃是否开始SSL，默认: false)\nspring.rabbitmq.ssl.key-store\t\t\t\t\t＃指定持有SSL certificate的key store的路径\nspring.rabbitmq.ssl.key-store-password\t\t\t＃指定访问key store的密码.\nspring.rabbitmq.ssl.trust-store\t\t\t\t\t＃指定持有SSL certificates的Trust store.\nspring.rabbitmq.ssl.trust-store-password\t\t＃指定访问trust store的密码.\nspring.rabbitmq.username\t\t\t\t\t\t＃指定登陆broker的用户名.\nspring.rabbitmq.virtual-host\t\t\t\t\t＃指定连接到broker的Virtual host.\n＃redis\nspring.redis.database\t\t\t\t\t\t\t＃指定连接工厂使用的Database index，默认为: 0\nspring.redis.host\t\t\t\t\t\t\t\t＃指定Redis server host，默认为: localhost\nspring.redis.password\t\t\t\t\t\t\t＃指定Redis server的密码\nspring.redis.pool.max-active\t\t\t\t\t＃指定连接池最大的活跃连接数，-1表示无限，默认为8\nspring.redis.pool.max-idle\t\t\t\t\t\t＃指定连接池最大的空闲连接数，-1表示无限，默认为8\nspring.redis.pool.max-wait\t\t\t\t\t\t＃指定当连接池耗尽时，新获取连接需要等待的最大时间，以毫秒单位，-1表示无限等待\nspring.redis.pool.min-idle\t\t\t\t\t\t＃指定连接池中空闲连接的最小数量，默认为0\nspring.redis.port\t\t\t\t\t\t\t\t＃指定redis服务端端口，默认: 6379\nspring.redis.sentinel.master\t\t\t\t\t＃指定redis server的名称\nspring.redis.sentinel.nodes\t\t\t\t\t\t＃指定sentinel节点，逗号分隔，格式为host:port.\nspring.redis.timeout\t\t\t\t\t\t\t＃指定连接超时时间，毫秒单位，默认为0\n＃resource\nspring.resources.add-mappings\t\t\t\t\t＃是否开启默认的资源处理，默认为true\nspring.resources.cache-period\t\t\t\t\t＃设定资源的缓存时效，以秒为单位.\nspring.resources.chain.cache\t\t\t\t\t＃是否开启缓存，默认为: true\nspring.resources.chain.enabled\t\t\t\t\t＃是否开启资源 handling chain，默认为false\nspring.resources.chain.html-application-cache\t＃是否开启h5应用的cache manifest重写，默认为: false\nspring.resources.chain.strategy.content.enabled\t＃是否开启内容版本策略，默认为false\nspring.resources.chain.strategy.content.paths\t＃指定要应用的版本的路径，多个以逗号分隔，默认为:[/**]\nspring.resources.chain.strategy.fixed.enabled\t＃是否开启固定的版本策略，默认为false\nspring.resources.chain.strategy.fixed.paths\t\t＃指定要应用版本策略的路径，多个以逗号分隔\nspring.resources.chain.strategy.fixed.version\t＃指定版本策略使用的版本号\nspring.resources.static-locations\t\t\t\t＃指定静态资源路径，默认为classpath:[/META-INF/resources/,/resources/, /static/, /public/]以及context:/\n＃security     spring security是springboot支持的权限控制系统。\nsecurity.basic.authorize-mode\t\t\t\t\t＃要使用权限控制模式.\nsecurity.basic.enabled\t\t\t\t\t\t\t＃是否开启基本的鉴权，默认为true\nsecurity.basic.path\t\t\t\t\t\t\t\t＃需要鉴权的path，多个的话以逗号分隔，默认为[/**]\nsecurity.basic.realm\t\t\t\t\t\t\t＃HTTP basic realm 的名字，默认为Spring\nsecurity.enable-csrf\t\t\t\t\t\t\t＃是否开启cross-site request forgery校验，默认为false.\nsecurity.filter-order\t\t\t\t\t\t\t＃Security filter chain的order，默认为0\nsecurity.headers.cache\t\t\t\t\t\t\t＃是否开启http头部的cache控制，默认为false.\nsecurity.headers.content-type\t\t\t\t\t＃是否开启X-Content-Type-Options头部，默认为false.\nsecurity.headers.frame\t\t\t\t\t\t\t＃是否开启X-Frame-Options头部，默认为false.\nsecurity.headers.hsts\t\t\t\t\t\t\t＃指定HTTP Strict Transport Security (HSTS)模式(none, domain, all).\nsecurity.headers.xss\t\t\t\t\t\t\t＃是否开启cross-site scripting (XSS) 保护，默认为false.\nsecurity.ignored\t\t\t\t\t\t\t\t＃指定不鉴权的路径，多个的话以逗号分隔.\nsecurity.oauth2.client.access-token-uri\t\t\t＃指定获取access token的URI.\nsecurity.oauth2.client.access-token-validity-seconds\t\t＃指定access token失效时长.\nsecurity.oauth2.client.additional-information.[key]\t\t\t＃设定要添加的额外信息.\nsecurity.oauth2.client.authentication-scheme\t\t\t\t＃指定传输不记名令牌(bearer token)的方式(form, header, none,query)，默认为header\nsecurity.oauth2.client.authorities\t\t\t\t＃指定授予客户端的权限.\nsecurity.oauth2.client.authorized-grant-types\t＃指定客户端允许的grant types.\nsecurity.oauth2.client.auto-approve-scopes\t\t＃对客户端自动授权的scope.\nsecurity.oauth2.client.client-authentication-scheme\t\t\t＃传输authentication credentials的方式(form, header, none, query)，默认为header方式\nsecurity.oauth2.client.client-id\t\t\t\t＃指定OAuth2 client ID.\nsecurity.oauth2.client.client-secret\t\t\t＃指定OAuth2 client secret. 默认是一个随机的secret.\nsecurity.oauth2.client.grant-type\t\t\t\t＃指定获取资源的access token的授权类型.\nsecurity.oauth2.client.id\t\t\t\t\t\t＃指定应用的client ID.\nsecurity.oauth2.client.pre-established-redirect-uri\t\t\t＃服务端pre-established的跳转URI.\nsecurity.oauth2.client.refresh-token-validity-seconds\t\t＃指定refresh token的有效期.\nsecurity.oauth2.client.registered-redirect-uri\t\t\t\t＃指定客户端跳转URI，多个以逗号分隔.\nsecurity.oauth2.client.resource-ids\t\t\t\t＃指定客户端相关的资源id，多个以逗号分隔.\nsecurity.oauth2.client.scope\t\t\t\t\t＃client的scope\nsecurity.oauth2.client.token-name\t\t\t\t＃指定token的名称\nsecurity.oauth2.client.use-current-uri\t\t\t＃是否优先使用请求中URI，再使用pre-established的跳转URI. 默认为true\nsecurity.oauth2.client.user-authorization-uri\t＃用户跳转去获取access token的URI.\nsecurity.oauth2.resource.id\t\t\t\t\t\t＃指定resource的唯一标识.\nsecurity.oauth2.resource.jwt.key-uri\t\t\t＃JWT token的URI. 当key为公钥时，或者value不指定时指定.\nsecurity.oauth2.resource.jwt.key-value\t\t\t＃JWT token验证的value. 可以是对称加密或者PEMencoded RSA公钥. 可以使用URI作为value.\nsecurity.oauth2.resource.prefer-token-info\t\t＃是否使用token info，默认为true\nsecurity.oauth2.resource.service-id\t\t\t\t＃指定service ID，默认为resource.\nsecurity.oauth2.resource.token-info-uri\t\t\t＃token解码的URI.\nsecurity.oauth2.resource.token-type\t\t\t\t＃指定当使用userInfoUri时，发送的token类型.\nsecurity.oauth2.resource.user-info-uri\t\t\t＃指定user info的URI\nsecurity.oauth2.sso.filter-order\t\t\t\t＃如果没有显示提供WebSecurityConfigurerAdapter时指定的Filter order.\nsecurity.oauth2.sso.login-path\t\t\t\t\t＃跳转到SSO的登录路径默认为/login.\nsecurity.require-ssl\t\t\t\t\t\t\t＃是否对所有请求开启SSL，默认为false.\nsecurity.sessions\t\t\t\t\t\t\t\t＃指定Session的创建策略(always, never, if_required, stateless).\nsecurity.user.name\t\t\t\t\t\t\t\t＃指定默认的用户名，默认为user.\nsecurity.user.password\t\t\t\t\t\t\t＃默认的用户密码.\nsecurity.user.role\t\t\t\t\t\t\t\t＃默认用户的授权角色.\n＃sendgrid\nspring.sendgrid.password\t\t\t\t\t\t＃指定SendGrid password.\nspring.sendgrid.proxy.host\t\t\t\t\t\t＃指定SendGrid proxy host.\nspring.sendgrid.proxy.port\t\t\t\t\t\t＃指定SendGrid proxy port.\nspring.sendgrid.username\t\t\t\t\t\t＃指定SendGrid username.\n＃server配置\nserver.address\t\t\t\t\t\t\t\t＃指定server绑定的地址\nserver.compression.enabled\t\t\t\t\t＃是否开启压缩，默认为false.\nserver.compression.excluded-user-agents\t\t＃指定不压缩的user-agent，多个以逗号分隔，默认值为:text/html,text/xml,text/plain,text/css\nserver.compression.mime-types\t\t\t\t＃指定要压缩的MIME type，多个以逗号分隔.\nserver.compression.min-response-size\t\t＃执行压缩的阈值，默认为2048\nserver.context-parameters.[param name]\t\t＃设置servlet context 参数\nserver.context-path\t\t\t\t\t\t\t＃设定应用的context-path.\nserver.display-name\t\t\t\t\t\t\t＃设定应用的展示名称，默认: application\nserver.jsp-servlet.class-name\t\t\t\t＃设定编译JSP用的servlet，默认: org.apache.jasper.servlet.JspServlet)\nserver.jsp-servlet.init-parameters.[param name]\t\t\t\t＃设置JSP servlet 初始化参数.\nserver.jsp-servlet.registered\t\t\t\t＃设定JSP servlet是否注册到内嵌的servlet容器，默认true\nserver.port\t\t\t\t\t\t\t\t\t＃设定http监听端口\nserver.servlet-path\t\t\t\t\t\t\t＃设定dispatcher servlet的监听路径，默认为: /\n＃SHELL      REMOTE SHELL  \nshell.auth = simple\t\t\t\t\t\t\t\t＃认证类型。根据环境自动检测。  \nshell.auth.jaas.domain =my-domain\t\t\t\t＃JAAS域。  \nshell.auth.key.path =\t\t\t\t\t\t\t＃认证密钥的路径。这应该指向一个有效的“.pem”文件。  \nshell.auth.simple.user.name = user\t\t\t\t＃登录用户。  \nshell.auth.simple.user.password =\t\t\t\t＃登录密码。  \nshell.auth.spring.roles = ADMIN\t\t\t\t\t＃用于登录到CRaSH控制台的所需角色的逗号分隔列表。  \nshell.command-path-patterns = classpath *：/ commands / **，classpath *：/ crash / commands / **＃用于查找命令的模式。  \nshell.command-refresh-interval = -1\t\t\t\t＃扫描更改并在必要时更新命令（以秒为单位）。  \nshell.config-path-patterns = \t\t\t\t\t＃用于查找配置的模式。  \nshell.disabled-commands \t\t\t\t\t\t＃禁用命令的逗号分隔列表。  \nshell.disabled-plugins =\t\t\t\t\t\t＃禁用逗号分隔的插件列表。根据环境，某些插件默认是禁用的。  \nshell.ssh.auth-timeout =\t\t\t\t\t\t＃用户提示重新登录后的毫秒数。  \nshell.ssh.enabled = true\t\t\t\t\t\t＃启用CRaSH SSH支持。  \nshell.ssh.idle-timeout =\t\t\t\t\t\t＃关闭未使用的连接之后的毫秒数。  \nshell.ssh.key-path =\t\t\t\t\t\t\t＃SSH服务器密钥的路径。  \nshell.ssh.port = 2000\t\t\t\t\t\t\t＃SSH端口。  \nshell.telnet.enabled = false\t\t\t\t\t＃启用CRaSH telnet支持。如果TelnetPlugin可用，则默认启用。  \nshell.telnet.port = 5000\t\t\t\t\t\t＃Telnet端口。  \n＃social\nspring.social.auto-connection-views\t\t\t\t＃是否开启连接状态的视图，默认为false\nspring.social.facebook.app-id\t\t\t\t\t＃指定应用id\nspring.social.facebook.app-secret\t\t\t\t＃指定应用密码\nspring.social.linkedin.app-id\t\t\t\t\t＃指定应用id\nspring.social.linkedin.app-secret\t\t\t\t＃指定应用密码\nspring.social.twitter.app-id\t\t\t\t\t＃指定应用ID.\nspring.social.twitter.app-secret\t\t\t\t＃指定应用密码\n＃ssl配置\nserver.ssl.ciphers\t\t\t\t\t\t\t\t＃是否支持SSL ciphers.\nserver.ssl.client-auth\t\t\t\t\t\t\t＃设定client authentication是wanted 还是 needed.\nserver.ssl.enabled\t\t\t\t\t\t\t\t＃是否开启ssl，默认: true\nserver.ssl.key-alias\t\t\t\t\t\t\t＃设定key store中key的别名.\nserver.ssl.key-password\t\t\t\t\t\t\t＃访问key store中key的密码.\nserver.ssl.key-store\t\t\t\t\t\t\t＃设定持有SSL certificate的key store的路径，通常是一个.jks文件.\nserver.ssl.key-store-password\t\t\t\t\t＃设定访问key store的密码.\nserver.ssl.key-store-provider\t\t\t\t\t＃设定key store的提供者.\nserver.ssl.key-store-type\t\t\t\t\t\t＃设定key store的类型.\nserver.ssl.protocol\t\t\t\t\t\t\t\t＃使用的SSL协议，默认: TLS\nserver.ssl.trust-store\t\t\t\t\t\t\t＃持有SSL certificates的Trust store.\nserver.ssl.trust-store-password\t\t\t\t\t＃访问trust store的密码.\nserver.ssl.trust-store-provider\t\t\t\t\t＃设定trust store的提供者.\nserver.ssl.trust-store-type\t\t\t\t\t\t＃指定trust store的类型.\n＃tomcat服务器配置（ServerProperties）  \nserver.port = 8080   \t\t\t\t\t\t\t\t\t\t＃端口\nserver.address =  \t\t\t\t\t\t\t\t\t\t\t＃该服务绑定IP地址，启动服务器时如本机不是该IP地址则抛出异常启动失败，只有特殊需求的情况下才配置\nserver.session-timeout =\t\t\t\t\t\t\t\t\t＃会话超时秒数  默认30\nserver.context-path =   \t\t\t\t\t\t\t\t\t＃上下文路径，默认为  '/'  \nserver.servlet-path =\t\t\t\t\t\t\t\t\t\t＃servlet路径，默认为  '/'  \nserver.tomcat.access-log-pattern =\t\t\t\t\t\t\t＃访问日志的日志模式  \nserver.tomcat.access-log-enabled = false  \t\t\t\t\t＃启用访问日志记录  \nserver.tomcat.protocol-header = x -forwarded-proto \t\t\t＃ssl转发标头  \nserver.tomcat.accesslog.pattern\t\t\t\t\t\t\t\t＃设定access logs的格式，默认: common\nserver.tomcat.accesslog.prefix\t\t\t\t\t\t\t\t＃设定Log 文件的前缀，默认: access_log\nserver.tomcat.accesslog.suffix\t\t\t\t\t\t\t\t＃设定Log 文件的后缀，默认: .log\nserver.tomcat.background-processor-delay = 30 ; \t\t\t＃ 后台线程方法的Delay大小: 30\nserver.tomcat.basedir\t\t\t\t\t\t\t\t\t\t＃设定Tomcat的base 目录，如果没有指定则使用临时目录.\nserver.tomcat.internal-proxies\t\t\t\t\t\t\t\t＃设定信任的正则表达式，默认:“10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}| 192\\.168\\.\\d{1,3}\\.\\d{1,3}|\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t＃169\\.254\\.\\d{1,3}\\.\\d{1,3}| 127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}| 172\\.1[6-9]{1}\\.\\d{1,3}\\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t＃.\\d{1,3}| 172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}”\nserver.tomcat.max-http-header-size\t\t\t\t\t\t\t＃设定http header的最小值，默认: 0\nserver.tomcat.max-threads\t\t\t\t\t\t\t\t\t＃设定tomcat的最大工作线程数，默认为: 0\nserver.tomcat.port-header\t\t\t\t\t\t\t\t\t＃设定http header使用的，用来覆盖原来port的value.\nserver.tomcat.protocol-header\t\t\t\t\t\t\t\t＃设定Header包含的协议，通常是 X-Forwarded-Proto，如果remoteIpHeader有值，则将设置为RemoteIpValve.\nserver.tomcat.protocol-header-https-value\t\t\t\t\t＃设定使用SSL的header的值，默认https.\nserver.tomcat.remote-ip-header\t\t\t\t\t\t\t\t＃设定remote IP的header，如果remoteIpHeader有值，则设置为RemoteIpValve\nserver.tomcat.uri-encoding\t\t\t\t\t\t\t\t\t＃设定URI的解码字符集.\n＃THYMELEAF（Thymeleaf 模板）  \nspring.thymeleaf.prefix =    \t\t\t\t\t\t\t\t＃类路径：/模板/  检查模板位置\nspring.thymeleaf.suffix =  \nspring.thymeleaf.mode = HTML5  \t\t\t\t\t\t\t\t＃模板的模式\nspring.thymeleaf.encoding = UTF- 8  \nspring.thymeleaf.content-type = text / html＃; charset = <编码>  \nspring.thymeleaf.cache = true  \t\t\t\t\t\t\t\t＃这个开发配置为false，避免改了模板还要重启服务器 \n＃undertow\nserver.undertow.access-log-dir\t\t\t\t\t＃设定Undertow access log 的目录，默认: logs\nserver.undertow.access-log-enabled\t\t\t\t＃是否开启access log，默认: false\nserver.undertow.access-log-pattern\t\t\t\t＃设定access logs的格式，默认: common\nserver.undertow.accesslog.dir\t\t\t\t\t＃设定access log 的目录.\nserver.undertow.buffer-size\t\t\t\t\t\t＃设定buffer的大小.\nserver.undertow.buffers-per-region\t\t\t\t＃设定每个region的buffer数\nserver.undertow.direct-buffers\t\t\t\t\t＃设定堆外内存\nserver.undertow.io-threads\t\t\t\t\t\t＃设定I/O线程数.\nserver.undertow.worker-threads\t\t\t\t\t＃设定工作线程数\n＃velocity\nspring.velocity.allow-request-override\t\t\t＃指定HttpServletRequest的属性是否可以覆盖controller的model的同名项\nspring.velocity.allow-session-override\t\t\t＃指定HttpSession的属性是否可以覆盖controller的model的同名项\nspring.velocity.cache\t\t\t\t\t\t\t＃是否开启模板缓存\nspring.velocity.charset\t\t\t\t\t\t\t＃设定模板编码\nspring.velocity.check-template-location\t\t\t＃是否检查模板路径是否存在.\nspring.velocity.content-type\t\t\t\t\t＃设定ContentType的值\nspring.velocity.date-tool-attribute\t\t\t\t＃设定暴露给velocity上下文使用的DateTool的名\nspring.velocity.enabled\t\t\t\t\t\t\t＃设定是否允许mvc使用velocity\nspring.velocity.expose-request-attributes\t\t＃是否在merge模板的时候，将request属性都添加到model中\nspring.velocity.expose-session-attributes\t\t＃是否在merge模板的时候，将HttpSession属性都添加到model中\nspring.velocity.expose-spring-macro-helpers\t\t＃设定是否以springMacroRequestContext的名来暴露RequestContext给Spring’s macro类库使用\nspring.velocity.number-tool-attribute\t\t\t＃设定暴露给velocity上下文的NumberTool的名\nspring.velocity.prefer-file-system-access\t\t＃是否优先从文件系统加载模板以支持热加载，默认为true\nspring.velocity.prefix\t\t\t\t\t\t\t＃设定velocity模板的前缀.\nspring.velocity.properties\t\t\t\t\t\t＃设置velocity的额外属性.\nspring.velocity.request-context-attribute\t\t＃设定RequestContext attribute的名.\nspring.velocity.resource-loader-path\t\t\t＃设定模板路径，默认为: classpath:/templates/\nspring.velocity.suffix\t\t\t\t\t\t\t＃设定velocity模板的后缀.\nspring.velocity.toolbox-config-location\t\t\t＃设定Velocity Toolbox配置文件的路径，比如 /WEB-INF/toolbox.xml.\nspring.velocity.view-names\t\t\t\t\t\t＃设定需要解析的视图名称.\n")])])]),e("h4",{attrs:{id:"resources-application-properties-修改配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resources-application-properties-修改配置"}},[t._v("#")]),t._v(" resources\\application.properties 修改配置")]),t._v(" "),e("p",[t._v("创建 application.properties")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727095536911.png",alt:"image-20220727095536911"}})]),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#默认 server.port=8080")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("server.port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10001")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#修改文件上传的大小")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个配置是在哪里读取？")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#multipart.max-file-size 属性可以指定springboot上传文件的大小限制-体现约定优于配置")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#默认配置最终都是映射到某个类,比如multipart.max-file-size")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#会映射/关联到MultipartProperties 上")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#把光标放在该属性，输入ctrl+b 就可以定位这个属性是关联到哪个类(属性类)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("spring.servlet.multipart.max-file-size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("10MB")]),t._v("\n")])])]),e("h4",{attrs:{id:"resources-application-properties-自定义配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#resources-application-properties-自定义配置"}},[t._v("#")]),t._v(" resources\\application.properties 自定义配置")]),t._v(" "),e("p",[t._v('还可以在 properties 文件中自定义配置，通过@Value("${}")获取对应属性值')]),t._v(" "),e("p",[t._v("修改 application.properties")]),t._v(" "),e("div",{staticClass:"language-properties extra-class"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#自定义配置属性")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("my.website")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("https://www.baidu.com")]),t._v("\n")])])]),e("p",[t._v("修改 HiController.java")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//website属性值 从 applicaiton.properties 的 k-v 读取")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${my.website}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" website"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"springboot-在哪配置读取-application-properites"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot-在哪配置读取-application-properites"}},[t._v("#")]),t._v(" SpringBoot 在哪配置读取 application.properites")]),t._v(" "),e("p",[t._v("打开 ConfigFileApplicationListener.java")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727113507596.png",alt:"image-20220727113507596"}})]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note the order is from least to most specific (last one wins)")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" DEFAULT_SEARCH_LOCATIONS "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"classpath:/,classpath:/config/,file:./,file:./config/*/,file:./config/"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" DEFAULT_NAMES "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"application"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("把 application.properties 放在 resources\\config 目录下，依然是管用的。")]),t._v(" "),e("p",[t._v("测试完毕，记得把恢复到原来的位置。")]),t._v(" "),e("h3",{attrs:{id:"自动配置-遵守按需加载原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动配置-遵守按需加载原则"}},[t._v("#")]),t._v(" 自动配置 遵守按需加载原则")]),t._v(" "),e("h4",{attrs:{id:"基本说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本说明"}},[t._v("#")]),t._v(" 基本说明")]),t._v(" "),e("ol",[e("li",[t._v("自动配置遵守按需加载原则")]),t._v(" "),e("li",[t._v("SpringBoot 所有的自动配置功能都在 spring-boot-autoconfigure 包里面。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727115043873.png",alt:"image-20220727115043873"}})]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("在 SpringBoot 的自动配置包，一般是 XxxAutoConfiguration.java，对应 XxxxProperties.java，如图：")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727115152328.png",alt:"image-20220727115152328"}})]),t._v(" "),e("h4",{attrs:{id:"案例演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例演示"}},[t._v("#")]),t._v(" 案例演示")]),t._v(" "),e("p",[t._v("以 MultipartProperties , MultipartAutoConfiguration 和 application.properties 来说明")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727115900647.png",alt:"image-20220727115900647"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727120024353.png",alt:"image-20220727120024353"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727120209771.png",alt:"image-20220727120209771"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727120603757.png",alt:"image-20220727120603757"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/springboot/image-20220727120652527.png",alt:"image-20220727120652527"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);