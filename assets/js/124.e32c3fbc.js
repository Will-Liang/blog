(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{526:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("ol",[a("li",[t._v("对输入的数据(比如表单数据)，进行必要的验证，并给出相应的提示信息。")]),t._v(" "),a("li",[t._v("对于验证表单数据，SpringMVC 提供了很多实用的注解，这些注解由 JSR 303 验证框架提供。")])]),t._v(" "),a("h3",{attrs:{id:"jsr-303-验证框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsr-303-验证框架"}},[t._v("#")]),t._v(" JSR 303 验证框架")]),t._v(" "),a("ol",[a("li",[t._v("JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 中。")]),t._v(" "),a("li",[t._v("JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则， 并通过标准的验证接口对 Bean 进行验证。")]),t._v(" "),a("li",[t._v("JSR 303 提供的基本验证注解有：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623160336952.png",alt:"image-20220623160336952"}})]),t._v(" "),a("h3",{attrs:{id:"hibernate-validator-扩展注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hibernate-validator-扩展注解"}},[t._v("#")]),t._v(" Hibernate Validator 扩展注解")]),t._v(" "),a("ol",[a("li",[t._v("Hibernate Validator 和 Hibernate 没有关系，只是 JSR 303 实现的一个扩展。")]),t._v(" "),a("li",[t._v("Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解:")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623160426633.png",alt:"image-20220623160426633"}})]),t._v(" "),a("h2",{attrs:{id:"应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用实例"}},[t._v("#")]),t._v(" 应用实例")]),t._v(" "),a("h3",{attrs:{id:"引入验证和国际化相关的-jar-包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入验证和国际化相关的-jar-包"}},[t._v("#")]),t._v(" 引入验证和国际化相关的 jar 包")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623160608163.png",alt:"image-20220623160608163"}})]),t._v(" "),a("h3",{attrs:{id:"修改-monster-java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-monster-java"}},[t._v("#")]),t._v(" 修改 Monster.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@Range(min = 1,max = 100)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示接收的age值，在 1-100之间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@NotEmpty 表示name不能为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Asserts that the annotated string, collection, map or array is not {@code null} or empty.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotEmpty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"修改-monsterhandler-java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-monsterhandler-java"}},[t._v("#")]),t._v(" 修改 MonsterHandler.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 编写方法,处理添加妖怪\n     * 1. springmvc可以将提交的数据，按照参数名和对象的属性名匹配\n     * 2. 直接封装到对象中\n     * String => Integer\n     * 3. @Valid Monster monster :表示对monster接收的数据进行校验\n     * 4. Errors errors 表示如果校验出现错误，将校验的错误信息保存 errors\n     * 5. Map<String, Object> map  表示如果校验出现错误, 将校验的错误信息保存 map 同时保存monster对象\n     * 6. 校验发生的时机： 在springmvc底层，反射调用目标方法时，会接收到http请求的数据，然后根据注解来进行验证\n     * , 在验证过程中，如果出现了错误，就把错误信息填充errors 和 map\n     * @param monster\n     * @return\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/save"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Valid")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Monster")]),t._v(" monster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Errors")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"----monster---"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" monster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们为了看到验证的情况,我们输出map 和 errors")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===== map ======"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entrySet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key= "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" value="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" entry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"===== errors ======"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasErrors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断是否有错误")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" allErrors "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" errors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAllErrors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ObjectError")]),t._v(" error "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" allErrors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"datavalid/monster_addUI"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"datavalid/success"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"修改-web-web-inf-pages-datavalid-monster-addui-jsp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-web-web-inf-pages-datavalid-monster-addui-jsp"}},[t._v("#")]),t._v(" 修改 web/WEB-INF/pages/datavalid/monster_addUI.jsp")]),t._v(" "),a("div",{staticClass:"language-jsp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n<h3>添加妖怪</h3>\n<form:form action="save" method="post" modelAttribute="monster">\n    妖怪名字: <form:input path="name"/> <form:errors path="name"/> <br><br>\n    妖怪年龄~: <form:input path="age"/> <form:errors path="age"/> <br><br>\n    电子邮件: <form:input path="email"/> <form:errors path="email"/>  <br><br>\n    妖怪生日: <form:input path="birthday"/> <form:errors path="birthday"/> 要求以"9999-11-11"的形式<br><br>\n    妖怪薪水: <form:input path="salary"/> <form:errors path="salary"/> 要求以"123,890.12"的形式<br><br>\n    <input type="submit" value="添加妖怪"/>\n</form:form>\n</body>\n</html>\n')])])]),a("h3",{attrs:{id:"测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("===== map ======\nkey= monster value=Monster{id=null, email='jack@sohu.com', age=101, name='', birthday=null, salary=null}\nkey= org.springframework.validation.BindingResult.monster value=org.springframework.validation.BeanPropertyBindingResult: 4 errors\nField error in object 'monster' on field 'birthday': rejected value [20001-15]; codes [typeMismatch.monster.birthday,typeMismatch.birthday,typeMismatch.java.util.Date,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.birthday,birthday]; arguments []; default message [birthday]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Date' for property 'birthday'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '20001-15'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [20001-15]]\nField error in object 'monster' on field 'salary': rejected value [999x,999]; codes [typeMismatch.monster.salary,typeMismatch.salary,typeMismatch.java.lang.Float,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Float' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: \"999x,999\"]\nField error in object 'monster' on field 'age': rejected value [101]; codes [Range.monster.age,Range.age,Range.java.lang.Integer,Range]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.age,age]; arguments []; default message [age],100,1]; default message [需要在1和100之间]\nField error in object 'monster' on field 'name': rejected value []; codes [NotEmpty.monster.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.name,name]; arguments []; default message [name]]; default message [不能为空]\n===== errors ======\nerror=Field error in object 'monster' on field 'birthday': rejected value [20001-15]; codes [typeMismatch.monster.birthday,typeMismatch.birthday,typeMismatch.java.util.Date,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.birthday,birthday]; arguments []; default message [birthday]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.util.Date' for property 'birthday'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '20001-15'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [20001-15]]\nerror=Field error in object 'monster' on field 'salary': rejected value [999x,999]; codes [typeMismatch.monster.salary,typeMismatch.salary,typeMismatch.java.lang.Float,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Float' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: \"999x,999\"]\nerror=Field error in object 'monster' on field 'age': rejected value [101]; codes [Range.monster.age,Range.age,Range.java.lang.Integer,Range]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.age,age]; arguments []; default message [age],100,1]; default message [需要在1和100之间]\nerror=Field error in object 'monster' on field 'name': rejected value []; codes [NotEmpty.monster.name,NotEmpty.name,NotEmpty.java.lang.String,NotEmpty]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [monster.name,name]; arguments []; default message [name]]; default message [不能为空]\n")])])]),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623162718650.png",alt:"image-20220623162718650"}})]),t._v(" "),a("p",[a("strong",[t._v("错误信息太丑了，不是人看的！！")])]),t._v(" "),a("h3",{attrs:{id:"创建-src-i18n-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建-src-i18n-properties"}},[t._v("#")]),t._v(" 创建 src\\i18n.properties")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("NotEmpty.monster.name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\u7528\\u6237\\u540d\\u4e0d\\u80fd\\u4e3a\\u7a7a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("typeMismatch.monster.age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\u5e74\\u9f84\\u8981\\u6c42\\u5728\\u0031\\u002d\\u0031\\u0035\\u0030\\u4e4b\\u95f4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("typeMismatch.monster.birthday")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\u751f\\u65e5\\u683c\\u5f0f\\u4e0d\\u6b63\\u786e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("typeMismatch.monster.salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\u85aa\\u6c34\\u683c\\u5f0f\\u4e0d\\u6b63\\u786e")]),t._v("\n")])])]),a("h3",{attrs:{id:"配置国际化文件-springdispatcherservlet-servlet-xml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置国际化文件-springdispatcherservlet-servlet-xml"}},[t._v("#")]),t._v(" 配置国际化文件 springDispatcherServlet-servlet.xml")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 配置国际化错误信息的资源处理bean --\x3e")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("messageSource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("org.springframework.context.support.ResourceBundleMessageSource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 配置国际化文件名字\n            如果你这样配的话，表示messageSource回到 src/i18nXXX.properties去读取错误信息\n         --\x3e")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("property")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("basename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("i18n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("property")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("bean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"完成测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完成测试"}},[t._v("#")]),t._v(" 完成测试")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623163635598.png",alt:"image-20220623163635598"}})]),t._v(" "),a("h3",{attrs:{id:"注意事项和细节说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项和细节说明"}},[t._v("#")]),t._v(" 注意事项和细节说明")]),t._v(" "),a("ol",[a("li",[t._v("在需要验证的 Javabean/POJO 的字段上加上相应的验证注解。")]),t._v(" "),a("li",[t._v("目标方法上，在 JavaBean/POJO 类型的参数前，添加 @Valid 注解，告知 SpringMVC 该 bean 是需要验证的。")]),t._v(" "),a("li",[t._v("在 @Valid 注解之后，添加一个 Errors 或 BindingResult 类型的参数，可以获取到验证的错误信息。")]),t._v(" "),a("li",[t._v("需要使用 "),a("code",[t._v('<form:errors path="email"></form:errors>')]),t._v(" 标签来显示错误消息，这个标签需要写在"),a("code",[t._v("<form:form>")]),t._v("标签内生效。")]),t._v(" "),a("li",[t._v("错误消息的国际化文件 i18n.properties，中文需要是 Unicode 编码，使用工具转码")])]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("格式")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("验证规则.表单 modelAttribute 值.属性名=消息信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("NotEmpty.monster.name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\u540D\\u5B57\\u4E0D\\u80FD\\u4E3A\\u7A7A")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("typeMismatch.monster.age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("\\u7C7B\\u578B\\u4E0D\\u5339\\u914D")]),t._v("\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[t._v("注解@NotNull 和 @NotEmpty 的区别说明")])]),t._v(" "),a("p",[t._v("​\t\t（1）@NotEmpty： Asserts that the annotated string, collection, map or array is not {@code null} or empty.")]),t._v(" "),a("p",[t._v("​\t\t（2）@NotNull：The annotated element must not be {@code null}.  Accepts any type.")]),t._v(" "),a("p",[t._v("​\t\t"),a("strong",[t._v("如果是字符串验证空，建议使用 @NotEmpty。")])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[t._v("SpingMVC 验证时，会根据不同的验证错误，返回对应的信息。")])]),t._v(" "),a("h2",{attrs:{id:"注解的组合使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解的组合使用"}},[t._v("#")]),t._v(" 注解的组合使用")]),t._v(" "),a("h3",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("p",[t._v("age 没有，是空的，提交竟然成功了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623164847936.png",alt:"image-20220623164847936"}})]),t._v(" "),a("h3",{attrs:{id:"解决问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决问题"}},[t._v("#")]),t._v(" 解决问题")]),t._v(" "),a("p",[t._v("修改 Monster.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//email是string,使用@NotEmpty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotEmpty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@Range(min = 1,max = 100)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示接收的age值，在 1-100之间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age不能为空"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@NotEmpty 表示name不能为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Asserts that the annotated string, collection, map or array is not {@code null} or empty.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotEmpty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"生日不能为空"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@DateTimeFormat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yyyy-MM-dd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),t._v(" birthday"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NotNull")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"薪水不能为空"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NumberFormat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"###,###.##"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float")]),t._v(" salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这样就可以解决上述问题。")]),t._v(" "),a("h2",{attrs:{id:"数据类型转换校验核心类-databinder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换校验核心类-databinder"}},[t._v("#")]),t._v(" 数据类型转换校验核心类-DataBinder")]),t._v(" "),a("p",[t._v("图例 Spring MVC 通过反射机制对目标方法进行解析，将请求消息绑定到处理方法的入参中。")]),t._v(" "),a("p",[t._v("数据绑定的核心部件是 DataBinder，运行机制如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/springmvc/image-20220623165358312.png",alt:"image-20220623165358312"}})]),t._v(" "),a("h2",{attrs:{id:"取消某个属性的绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消某个属性的绑定"}},[t._v("#")]),t._v(" 取消某个属性的绑定")]),t._v(" "),a("h3",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[t._v("#")]),t._v(" 说明")]),t._v(" "),a("p",[t._v("​\t\t在默认情况下，表单提交的数据都会和 pojo 类型的 javabean 属性绑定，如果在开发中，希望取消某个属性的绑定，也就是说，"),a("strong",[t._v("不希望接收到某个表单对应的属性的值")]),t._v("，则可以通过 @InitBinder 注解取消绑定。")]),t._v(" "),a("ol",[a("li",[t._v("编写一个方法, 使用@InitBinder 标识的该方法，可以对 WebDataBinder 对象进行初始化。WebDataBinder 是 DataBinder 的子类，用于完成由表单字段到 JavaBean 属性的绑定。")]),t._v(" "),a("li",[t._v("@InitBinder 方法不能有返回值，它必须声明为 void。")]),t._v(" "),a("li",[t._v("@InitBinder 方法的参数通常是 WebDataBinder。")])]),t._v(" "),a("h3",{attrs:{id:"应用实例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用实例-2"}},[t._v("#")]),t._v(" 应用实例")]),t._v(" "),a("h4",{attrs:{id:"修改-monsterhandler-java-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-monsterhandler-java-2"}},[t._v("#")]),t._v(" 修改 MonsterHandler.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取消绑定 monster的name表单提交的值给monster.name属性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@InitBinder")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initBinder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebDataBinder")]),t._v(" webDataBinder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/**\n         * 1. 方法上需要标注 @InitBinder  springmvc底层会初始化 WebDataBinder\n         * 2. 调用 webDataBinder.setDisallowedFields("name") 表示取消指定属性的绑定\n         *    即：当表单提交字段为 name时， 就不在把接收到的name值，填充到model数据monster的name属性\n         * 3. 机制：springmvc 在底层通过反射调用目标方法时, 接收到http请求的参数和值,使用反射+注解技术\n         *    取消对指定属性的填充\n         * 4. setDisallowedFields支持可变参数，可以填写多个字段\n         * 5. 如果我们取消某个属性绑定,验证就没有意义了,应当把验证的注解去掉, name属性会使用默认值null\n         *  //@NotEmpty\n         *  private String name;\n         */')]),t._v("\n        webDataBinder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDisallowedFields")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"修改-monster-java-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-monster-java-2"}},[t._v("#")]),t._v(" 修改 Monster.java")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@NotEmpty 表示name不能为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Asserts that the annotated string, collection, map or array is not {@code null} or empty.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@NotEmpty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"完成测试-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完成测试-2"}},[t._v("#")]),t._v(" 完成测试")]),t._v(" "),a("p",[a("img",{staticStyle:{zoom:"67%"},attrs:{src:"/blog/springmvc/image-20220623171718897.png",alt:"image-20220623171718897"}}),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"D:\\Study\\VIP\\主流框架\\SpringMVC\\笔记\\SpringMVC.assets\\image-20220623171755053.png",alt:"image-20220623171755053"}})]),t._v(" "),a("h3",{attrs:{id:"注意事项和细节说明-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项和细节说明-2"}},[t._v("#")]),t._v(" 注意事项和细节说明")]),t._v(" "),a("ol",[a("li",[t._v("setDisallowedFields() 是可变形参，可以指定多个字段。")]),t._v(" "),a("li",[t._v("当将一个字段/属性，设置为 disallowed,就不在接收表单提交的值，那么这个字段/属性 的值，就是该对象默认的值 (具体看程序员定义时指定)。")]),t._v(" "),a("li",[t._v("一般来说，如果不接收表单字段提交数据，则该对象字段的验证也就没有意义了。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);