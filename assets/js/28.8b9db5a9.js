(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{428:function(e,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("ol",[t("li",[e._v("EL 表达式全称：Expression Language，是表达式语言")]),e._v(" "),t("li",[e._v("EL 表达式主要是代替 jsp 页面的表达式脚本 "),t("code",[e._v('<%=request.getAttribute("xx")%>')])]),e._v(" "),t("li",[e._v("EL 表达式输出数据的时，比 jsp 的表达式脚本简洁")]),e._v(" "),t("li",[e._v("EL 表达式基本语法： ${key1}，你可以理解就是一个语法糖")])]),e._v(" "),t("h2",{attrs:{id:"快速入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速入门"}},[e._v("#")]),e._v(" 快速入门")]),e._v(" "),t("div",{staticClass:"language-jsp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>el表达式快速入门</title>\n</head>\n<body>\n<h1>el表达式快速入门</h1>\n<%\n    request.setAttribute("name","梁lzw");\n%>\n<%--\n    1. 如果name是null，request.getAttribute() 返回的是null字符串\n    2. 如果name是null，${name}，返回的""\n--%>\n<h1>jsp表达式脚本</h1>\n名字 = <%=request.getAttribute("name") == null ? "":request.getAttribute("name")%><br>\n<h1>el 表达式</h1>\n名字 = ${name}<br/>\n</body>\n</html>\n')])])]),t("h2",{attrs:{id:"el常用输出形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el常用输出形式"}},[e._v("#")]),e._v(" EL常用输出形式")]),e._v(" "),t("p",[e._v("EL 表达式常用输出 Bean 的普通属性、 数组属性、List 集合属性和 map 集合属性")]),e._v(" "),t("div",{staticClass:"language-jsp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<%@ page import="com.lzw.entity.Book" %>\n<%@ page import="java.util.ArrayList" %>\n<%@ page import="java.util.HashMap" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>el表达式输出数据演示</title>\n</head>\n<body>\n<h1>el表达式输出数据演示</h1>\n<%\n    //创建Book对象，放入相关的属性\n    Book book = new Book();\n    book.setName("昆虫总动员");\n    book.setWriter(new String[]{"jack","tom"});\n    ArrayList<String> reader = new ArrayList<String>();\n    reader.add("老韩");\n    reader.add("lzw");\n    book.setReader(reader);//放入readers\n    HashMap<String, String> topics = new HashMap<>();\n    topics.put("topic1","这是我看过最好的动画片");\n    topics.put("topic2","不错的电影");\n    book.setTopics(topics);\n    //把book放入到request域对象\n    request.setAttribute("bookkey",book);\n%>\nbook对象：${bookkey}<br/>\nbook.name：${bookkey.name}<br/>\nbook.writer：${bookkey.writer}<br/>\nbook.writer[0]：${bookkey.writer[0]}<br/>\nbook.readers：${bookkey.reader}<br/>\nbook.readers第二个：${bookkey.reader.get(1)}<br/>\nbook.readers第二个：${bookkey.reader[1]}<br/>\nbook.topics：${bookkey.topics}<br/>\nbook.topics第一个：${bookkey.topics["topic1"]}<br/>\n</body>\n</html>\n')])])]),t("h2",{attrs:{id:"el运算操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el运算操作符"}},[e._v("#")]),e._v(" EL运算操作符")]),e._v(" "),t("p",[e._v("语法：${ 运算表达式 }")]),e._v(" "),t("h3",{attrs:{id:"关系运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关系运算"}},[e._v("#")]),e._v(" 关系运算")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blog/javaweb/image-20220314092625286.png",alt:"image-20220314092625286"}})]),e._v(" "),t("h3",{attrs:{id:"逻辑运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算"}},[e._v("#")]),e._v(" 逻辑运算")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blog/javaweb/image-20220314092649787.png",alt:"image-20220314092649787"}})]),e._v(" "),t("h3",{attrs:{id:"算术运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算术运算"}},[e._v("#")]),e._v(" 算术运算")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blog/javaweb/image-20220314092710646.png",alt:"image-20220314092710646"}})]),e._v(" "),t("h2",{attrs:{id:"el的empty运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el的empty运算"}},[e._v("#")]),e._v(" EL的empty运算")]),e._v(" "),t("p",[e._v("1.empty 运算可以判断一个数据是否为空，如果为空，返回 true，否则返回 false")]),e._v(" "),t("p",[e._v("2.以下几种情况为空")]),e._v(" "),t("p",[e._v("● 值为 null")]),e._v(" "),t("p",[e._v("● 值为空串的时")]),e._v(" "),t("p",[e._v("● 值是 Object 类型数组，长度为零")]),e._v(" "),t("p",[e._v("● list 集合，元素个数为零")]),e._v(" "),t("p",[e._v("● map 集合，元素个数为零")]),e._v(" "),t("div",{staticClass:"language-jsp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<%@ page import="java.util.ArrayList" %>\n<%@ page import="java.util.HashMap" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>el empty的运算</title>\n</head>\n<body>\n<h1>el empty的运算</h1>\n<%\n    request.setAttribute("k1",null);\n    request.setAttribute("k2","");\n    request.setAttribute("k3",new Object[]{});\n    request.setAttribute("k4",new ArrayList<>());\n    request.setAttribute("k5",new HashMap<String, Object>());\n%>\nk1 是否为空= ${empty k1}<br/>\nk2 是否为空= ${empty k2}<br/>\nk3 是否为空= ${empty k3}<br/>\nk4 是否为空= ${empty k4}<br/>\nk5 是否为空= ${empty k5}<br/>\nk5 是否为空= ${not empty k5}<br/>  \n</body>\n</html>\n')])])]),t("h2",{attrs:{id:"el三元运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el三元运算"}},[e._v("#")]),e._v(" EL三元运算")]),e._v(" "),t("p",[e._v("表达式 1?表达式 2: 表达式 3")]),e._v(" "),t("div",{staticClass:"language-jsp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('${score >= 60 ? "及格":"不及格"}\n')])])]),t("h2",{attrs:{id:"el的11个隐含对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el的11个隐含对象"}},[e._v("#")]),e._v(" EL的11个隐含对象")]),e._v(" "),t("p",[t("img",{attrs:{src:"/blog/javaweb/image-20220314093518792.png",alt:"image-20220314093518792"}})]),e._v(" "),t("h3",{attrs:{id:"el获取四个域数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el获取四个域数据"}},[e._v("#")]),e._v(" EL获取四个域数据")]),e._v(" "),t("div",{staticClass:"language-jsp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>EL 获取四个特定域中的属性</title>\n</head>\n<body>\n<h1>EL 获取四个特定域中的属性</h1>\n\n<%\n    pageContext.setAttribute("key1", "pageContext_key1 的值");\n    request.setAttribute("key1", "request_key1 的值");\n    session.setAttribute("key1", "session_key1 的值");\n    application.setAttribute("key1", "application_key1 的值");\n%>\napplication 的 key1: ${applicationScope.key1 }<br/>\npageContext 的 key1: ${pageScope.key1 }<br/>\nsession 的 key1: ${sessionScope.key1 }<br/>\nrequest 的 key1: ${requestScope.key1 }<br/>\n</body>\n</html>\n')])])]),t("h3",{attrs:{id:"pagecontext对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pagecontext对象"}},[e._v("#")]),e._v(" pageContext对象")]),e._v(" "),t("div",{staticClass:"language-jsp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>pageContext 对象的使用</title>\n</head>\n<body>\n<h1>pageContext 对象的使用</h1>\n<%--\n//通过 request 对象来获取和 HTTP 协议相关的数据\nrequest.getScheme() 它可以获取请求的协议\nrequest.getServerName() 获取请求的服务器 ip 或域名\nrequest.getServerPort() 获取请求的服务器端口号\ngetContextPath() 获取当前工程路径\nrequest.getMethod() 获取请求的方式（GET 或 POST）\nrequest.getRemoteHost() 获取客户端的 ip 地址\nsession.getId() 获取会话的唯一标识\n--%>\n<hr/>\n<%--\n    1.我们可以通过pageContext.request.xx 俩获取和http协议相关的信息\n    2.相当于替代 request.getMethod()....\n--%>\n协议： ${ pageContext.request.scheme }<br>\n服务器 ip：${ pageContext.request.serverName }<br>\n服务器端口：${ pageContext.request.serverPort }<br>\n工程路径：${ pageContext.request.contextPath }<br>\n请求方法：${ pageContext.request.method }<br>\n客户端 ip 地址：${ pageContext.request.remoteHost }<br>\n会话 id ：${ pageContext.session.id }<br>\n<h1>使用 jsp 表达式脚本获取如上信息</h1>\nip 地址: <%=request.getRemoteHost() %> <br>\n<h1>使用 el 表达式形式获取信息-简化写法</h1>\n<%\n    pageContext.setAttribute("req", request);\n%>\nip 地址: ${req.remoteHost} <br>\n获取请求方法: ${req.method} <br>\n</body>\n</html>\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);