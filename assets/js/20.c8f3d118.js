(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{421:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"抽象类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" "),s("strong",[t._v("抽象类")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("抽象类不能被实例化")])]),t._v(" "),s("li",[s("p",[t._v("抽象类不一定要包含 abstract 方法")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Abstract")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我不是抽象方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("一旦类包含了 abstract 方法，则这个类必须声明为 abstract")])]),t._v(" "),s("li",[s("p",[t._v("abstract 只能修饰类和方法，不能修饰属性和其他")])]),t._v(" "),s("li",[s("p",[t._v("抽象类可以有任意成员（因为抽象类还是类），比如：非抽象方法、构造器、静态属性等等")])]),t._v(" "),s("li",[s("p",[t._v("抽象方法不能有主体，即不能实现")])]),t._v(" "),s("li",[s("p",[t._v("如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类")])])]),t._v(" "),s("h2",{attrs:{id:"接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" "),s("strong",[t._v("接口")])]),t._v(" "),s("ol",[s("li",[t._v("接口不能被实例化")]),t._v(" "),s("li",[t._v("接口中所有的方法是 public 方法，接口中的抽象方法可以不用abstract修饰")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("一个普通类实现接口，就必须将该接口的所有方法都实现。")]),t._v(" "),s("li",[t._v("抽象类实现类接口，可以不用实现接口的方法。")])]),t._v(" "),s("h2",{attrs:{id:"抽象类和接口的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象类和接口的区别"}},[t._v("#")]),t._v(" "),s("strong",[t._v("抽象类和接口的区别")])]),t._v(" "),s("h3",{attrs:{id:"成员的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#成员的区别"}},[t._v("#")]),t._v(" "),s("strong",[t._v("成员的区别")])]),t._v(" "),s("p",[s("strong",[t._v("抽象类")])]),t._v(" "),s("p",[t._v("构造方法：有构造方法，用于子类实例化使用。\n成员变量：可以是变量，也可以是常量。\n成员方法：可以是抽象的，也可以是非抽象的。")]),t._v(" "),s("p",[s("strong",[t._v("接口")])]),t._v(" "),s("p",[t._v("构造方法：没有构造方法\n成员变量：只能是常量。默认修饰符："),s("code",[t._v("public static final")]),t._v("\n成员方法：jdk1.7只能是抽象的。默认修饰符："),s("code",[t._v("public abstract")]),t._v(" (推荐：默认修饰符请自己永远手动给出)\njdk1.8可以写以default和static开头的具体方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test3()"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"类和接口的关系区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类和接口的关系区别"}},[t._v("#")]),t._v(" "),s("strong",[t._v("类和接口的关系区别")])]),t._v(" "),s("p",[s("strong",[t._v("类与类")])]),t._v(" "),s("p",[t._v("继承关系，只能单继承。可以多层继承。")]),t._v(" "),s("p",[s("strong",[t._v("类与接口")])]),t._v(" "),s("p",[t._v("实现关系，可以单实现，也可以多实现。")]),t._v(" "),s("p",[t._v("类还可以在继承一个类的同时实现多个接口。")]),t._v(" "),s("p",[s("strong",[t._v("接口与接口")])]),t._v(" "),s("p",[t._v("继承关系，可以单继承，也可以多继承。")]),t._v(" "),s("h3",{attrs:{id:"理念不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理念不同"}},[t._v("#")]),t._v(" "),s("strong",[t._v("理念不同")])]),t._v(" "),s("p",[t._v("抽象类里面定义的都是一个继承体系中的共性内容。")]),t._v(" "),s("p",[t._v("接口是功能的集合，是一个体系额外的功能，是暴露出来的规则。")])])}),[],!1,null,null,null);s.default=r.exports}}]);