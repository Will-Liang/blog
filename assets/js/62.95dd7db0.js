(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{498:function(e,n,s){"use strict";s.r(n);var a=s(2),t=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("哪里去获得redis常见数据类型操作命令http://www.redis.cn/commands.html")]),e._v(" "),n("h2",{attrs:{id:"redis键-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis键-key"}},[e._v("#")]),e._v(" Redis键(key)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("keys *\n查看当前库所有key    (匹配：keys *1)\n\nexists key\n判断某个key是否存在\n\ntype key \n查看你的key是什么类型\n\ndel key       \n删除指定的key数据\n\nunlink key   \n根据value选择非阻塞删除\n仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。\n\nexpire key 10   \n10秒钟：为给定的key设置过期时间\n\nttl key \n查看还有多少秒过期，-1表示永不过期，-2表示已过期\n\nselect命令切换数据库\n\ndbsize查看当前数据库的key的数量\n\nflushdb清空当前库\n\nflushall通杀全部库\n")])])]),n("h2",{attrs:{id:"redis字符串-string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis字符串-string"}},[e._v("#")]),e._v(" Redis字符串(String)")]),e._v(" "),n("p",[e._v("String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。")]),e._v(" "),n("p",[e._v("String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。")]),e._v(" "),n("p",[e._v("String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M。")]),e._v(" "),n("h3",{attrs:{id:"常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("set   <key><value>\n添加键值对\n")])])]),n("p",[n("img",{attrs:{src:"/blog/redis/image-20221004162919795.png",alt:"image-20221004162919795"}})]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("get   <key>\n查询对应键值\n\nappend  <key><value>\n将给定的<value> 追加到原值的末尾\n\nstrlen  <key>\n获得值的长度\n\nsetnx  <key><value>\n只有在 key 不存在时    设置 key 的值\n\nincr  <key>\n    将 key 中储存的数字值增1\n    只能对数字值操作，如果为空，新增值为1\n    \ndecr  <key>\n    将 key 中储存的数字值减1\n    只能对数字值操作，如果为空，新增值为-1\n    \nincrby / decrby  <key><步长>\n\t将 key 中储存的数字值增减。自定义步长。\n\nmset  <key1><value1><key2><value2>  ..... \n同时设置一个或多个 key-value对 \n\nmget  <key1><key2><key3> .....\n同时获取一个或多个 value  \n\nmsetnx <key1><value1><key2><value2>  ..... \n同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。\n原子性，有一个失败则都失败\n\ngetrange  <key><起始位置><结束位置>\n获得值的范围，类似java中的substring，前包，后包\n\nsetrange  <key><起始位置><value>\n用 <value>  覆写<key>所储存的字符串值，从<起始位置>开始(索引从0开始)。\n\nsetex  <key><过期时间><value>\n设置键值的同时，设置过期时间，单位秒。\n\ngetset <key><value>\n以新换旧，设置了新值同时获得旧值。\n")])])]),n("h2",{attrs:{id:"redis列表-list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis列表-list"}},[e._v("#")]),e._v(" Redis列表(List)")]),e._v(" "),n("p",[e._v("单键多值\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。")]),e._v(" "),n("p",[e._v("它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。")]),e._v(" "),n("p",[n("img",{attrs:{src:"/blog/redis/image-20221004164143420.png",alt:"image-20221004164143420"}})]),e._v(" "),n("h3",{attrs:{id:"常用命令-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-2"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("lpush/rpush  <key><value1><value2><value3> .... \n从左边/右边插入一个或多个值。\n\nlpop/rpop  <key>\n从左边/右边吐出一个值。值在键在，值光键亡。\n\nrpoplpush  <key1><key2>\n从<key1>列表右边吐出一个值，插到<key2>列表左边。\n\nlrange <key><start><stop>\n按照索引下标获得元素(从左到右)\n\nlrange mylist 0 -1   \n0左边第一个，-1右边第一个，（0-1表示获取所有）\n\nlindex <key><index>\n按照索引下标获得元素(从左到右)\n\nllen <key>\n获得列表长度 \n\nlinsert <key>  before <value><newvalue>\n在<value>的后面插入<newvalue>插入值\n\nlrem <key><n><value>\n从左边删除n个value(从左到右)\n\nlset<key><index><value>\n将列表key下标为index的值替换成value\n")])])]),n("h2",{attrs:{id:"redis集合-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis集合-set"}},[e._v("#")]),e._v(" Redis集合(Set)")]),e._v(" "),n("p",[e._v("Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以"),n("strong",[e._v("自动排重")]),e._v("的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。")]),e._v(" "),n("p",[e._v("Redis的Set是string类型的"),n("strong",[e._v("无序集合")]),e._v("。"),n("strong",[e._v("它底层其实是一个value为null的hash表")]),e._v("，所以添加，删除，查找的"),n("strong",[e._v("复杂度都是O(1)")]),e._v("。")]),e._v(" "),n("p",[e._v("一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变。")]),e._v(" "),n("h3",{attrs:{id:"常用命令-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-3"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("sadd <key><value1><value2> ..... \n将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略\n\nsmembers <key>\n取出该集合的所有值。\n\nsismember <key><value>\n判断集合<key>是否为含有该<value>值，有1，没有0\n\nscard<key>\n返回该集合的元素个数。\n\nsrem <key><value1><value2> .... \n删除集合中的某个元素。\n\nspop <key>\n随机从该集合中吐出一个值。\n\nsrandmember <key><n>\n随机从该集合中取出n个值。不会从集合中删除 。\n\nsmove <source><destination>value\n把集合中一个值从一个集合移动到另一个集合\n\nsinter <key1><key2>\n返回两个集合的交集元素。\n\nsunion <key1><key2>\n返回两个集合的并集元素。\n\nsdiff <key1><key2>\n返回两个集合的差集元素(key1中的，不包含key2中的)\n")])])]),n("h2",{attrs:{id:"redis哈希-hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis哈希-hash"}},[e._v("#")]),e._v(" Redis哈希(Hash)")]),e._v(" "),n("p",[e._v("Redis hash 是一个键值对集合。")]),e._v(" "),n("p",[e._v("Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。")]),e._v(" "),n("p",[e._v("类似Java里面的Map<String,Object>")]),e._v(" "),n("h3",{attrs:{id:"常用命令-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-4"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("hset <key><field><value>\n给<key>集合中的  <field>键赋值<value>\n\nhget <key1><field>\n从<key1>集合<field>取出 value \n\nhmset <key1><field1><value1><field2><value2>... \n批量设置hash的值\n\nhexists<key1><field>\n查看哈希表 key 中，给定域 field 是否存在。 \n\nhkeys <key>\n列出该hash集合的所有field\n\nhvals <key>\n列出该hash集合的所有value\n\nhincrby <key><field><increment>\n为哈希表 key 中的域 field 的值加上增量 1   -1\n\nhsetnx <key><field><value>\n将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .\n")])])]),n("h2",{attrs:{id:"redis有序集合zset-sorted-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis有序集合zset-sorted-set"}},[e._v("#")]),e._v(" Redis有序集合Zset(sorted set)")]),e._v(" "),n("p",[e._v("Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。")]),e._v(" "),n("p",[e._v("不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。")]),e._v(" "),n("p",[e._v("因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。")]),e._v(" "),n("p",[e._v("访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。")]),e._v(" "),n("h3",{attrs:{id:"常用命令-5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令-5"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("zadd  <key><score1><value1><score2><value2>…\n将一个或多个 member 元素及其 score 值加入到有序集 key 当中。\n\nzrange <key><start><stop>  [WITHSCORES]   \n返回有序集 key 中，下标在<start><stop>之间的元素。带WITHSCORES，可以让分数一起和值返回到结果集。\n\nzrangebyscore key minmax [withscores] [limit offset count]\n返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 \n\nzrevrangebyscore key maxmin [withscores] [limit offset count]               \n同上，改为从大到小排列。 \n\nzincrby <key><increment><value>      \n为元素的score加上增量\n\nzrem  <key><value>\n删除该集合下，指定值的元素 \n\nzcount <key><min><max>\n统计该集合，分数区间内的元素个数\n\nzrank <key><value>\n返回该值在集合中的排名，从0开始。\n")])])])])}),[],!1,null,null,null);n.default=t.exports}}]);