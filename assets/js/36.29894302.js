(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{434:function(t,e,n){"use strict";n.r(e);var a=n(2),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("ol",[e("li",[t._v("JSTL 标签库 是指 JSP Standard Tag Library JSP 标准标签库")]),t._v(" "),e("li",[t._v("EL 表达式是为了替换 jsp 中的表达式脚本，JSTL 是为了替换代码脚本。这样 jsp 页面变得更佳简洁")]),t._v(" "),e("li",[t._v("JSTL 由五个标签库组成")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/javaweb/image-20220314100858009.png",alt:"image-20220314100858009"}})]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("使用 JSTL，需要导入相关的 jar 包")])]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/javaweb/image-20220314100923734.png",alt:"image-20220314100923734"}})]),t._v(" "),e("h2",{attrs:{id:"快速入门"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快速入门"}},[t._v("#")]),t._v(" 快速入门"),e("a",{attrs:{id:"jstlksrm"}})]),t._v(" "),e("div",{staticClass:"language-jsp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>jstl的快速入门</title>\n</head>\n<body>\n<h1>jstl的快速入门</h1>\n<%--\n    1. c:if 类似\n    2. if(10>2){\n        out.println("<h1>10 > 2 成立~ </h1>");\n    }\n--%>\n<c:if test="${10 > 2}">\n    <h1>10 > 2 成立~ </h1>\n</c:if>\n</body>\n</html>\n')])])]),e("p",[e("strong",[t._v("细节")])]),t._v(" "),e("p",[t._v("● taglib 引入标签，要放在行首")]),t._v(" "),e("p",[t._v("● 导入 jstl jar 包后，要重新发布 web 工程，否则不识别 jstl")]),t._v(" "),e("h2",{attrs:{id:"core核心库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#core核心库"}},[t._v("#")]),t._v(" Core核心库")]),t._v(" "),e("h3",{attrs:{id:"c-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-set"}},[t._v("#")]),t._v(" <c:set />")]),t._v(" "),e("div",{staticClass:"language-jsp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>c:set标签的使用</title>\n</head>\n<body>\n<h1>c:set标签的使用</h1>\n<%--\n    //Java代码\n    request.setAttribute("email", "hsp@sohu.com");\n--%>\n<%--\n    <c:set /> set 标签可以往域中保存数据\n    1. 等价 域对象.setAttribute(key,value);\n    2. scope 属性设置保存到哪个域\n            page 表示 PageContext 域（默认值）\n            request 表示 Request 域\n            session 表示 Session 域\n            application 表示 ServletContext 域\n    3. var 属性设置 key 是什么\n    4. value 属性设置值\n--%>\n<c:set scope="request" var="name" value="LiAng"></c:set>\n</body>\n</html>\n')])])]),e("h3",{attrs:{id:"c-if"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-if"}},[t._v("#")]),t._v(" <c:if />")]),t._v(" "),e("p",[e("img",{attrs:{src:"/blog/javaweb/image-20220314104734614.png",alt:"image-20220314104734614"}})]),t._v(" "),e("p",[t._v("代码见 "),e("a",{attrs:{href:"#jstlksrm"}},[t._v("快速入门")])]),t._v(" "),e("h3",{attrs:{id:"c-choose-c-when-c-otherwise-标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-choose-c-when-c-otherwise-标签"}},[t._v("#")]),t._v(" <c:choose> <c:when> <c:otherwise>标签")]),t._v(" "),e("p",[t._v("介绍：多路判断。跟 switch ... case .... default 非常接近")]),t._v(" "),e("div",{staticClass:"language-jsp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>c:choose标签的使用</title>\n</head>\n<body>\n<h1>c:choose标签的使用</h1>\n<%\n    request.setAttribute("score",90);\n    //request.setAttribute("k1", "request-k1的值");\n    //session.setAttribute("k1", "session-k1的值");\n    //application.setAttribute("k1", "application-k1的值");\n    //pageContext.setAttribute("k1", "pageContext-k1的值~");\n%>\n\n<%--\n1. 如果${requestScope.score} 那么就明确的指定从request域对象取出数据\n2. 如果${score}, 这是就按照从小到大的域范围去获取 pageContext->request->session->application\n--%>\n<c:choose>\n    <c:when test="${requestScope.score > 80}">\n        <h1>${score}-成绩优秀</h1>\n    </c:when>\n    <c:when test="${requestScope.score >= 60}">\n        <h1>${score}-成绩一般, 及格了</h1>\n    </c:when>\n    <c:otherwise>\n        <h1>${score}-没有及格，下次努力~</h1>\n    </c:otherwise>\n</c:choose>\n</body>\n</html>\n')])])]),e("h3",{attrs:{id:"c-foreach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-foreach"}},[t._v("#")]),t._v(" <c:forEach />")]),t._v(" "),e("p",[t._v("介绍: c:forEach 标签 用来遍历输出, 主要有 4 种形式")]),t._v(" "),e("p",[t._v("● 普通遍历输出 i 到 j")]),t._v(" "),e("p",[t._v("● 遍历数组")]),t._v(" "),e("p",[t._v("● 遍历 Map")]),t._v(" "),e("p",[t._v("● 遍历 List")]),t._v(" "),e("div",{staticClass:"language-jsp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<%@ page import="java.util.Map" %>\n<%@ page import="java.util.HashMap" %>\n<%@ page import="java.util.ArrayList" %>\n<%@ page import="java.util.List" %>\n<%@ page import="com.lzw.entity.Monster" %>\n\n<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\n<%@ page contentType="text/html;charset=UTF-8" language="java" %>\n<html>\n<head>\n    <title>c:forEach 标签</title>\n</head>\n<body>\n<h1>c:forEach 标签</h1>\n<hr/>\n<h1>第1种遍历方式从i到j</h1>\n<ul>\n    <%--\n    1.遍历 1 到 5，\n    2. 输出 begin 属性设置开始的索引 end 属性设置结束的索引\n    3. var 属性表示循环的变量(也是当前正在遍历到的数据)\n    4. 等价 for (int i = 1; i <= 5; i++) {}\n    5. 在默认情况下, i 每次会递增1\n    --%>\n    <c:forEach begin="1" end="5" var="i">\n        <li>排名=${i}</li>\n    </c:forEach>\n</ul>\n<hr/>\n<h1>第2种遍历方式：遍历数组</h1>\n<%\n    request.setAttribute("sports", new String[]{"打篮球", "乒乓球"});\n%>\n<%--\n    <c:forEach items="${ requestScope.sports }" var="item"/>\n    1. items 遍历的集合/数组\n    2. var 遍历到的数据\n    3. 等价 for (Object item: arr) {}\n--%>\n<c:forEach items="${requestScope.sports}" var="sport">\n    运动名称= ${sport}<br/>\n</c:forEach>\n<hr/>\n<h1>第3种遍历方式：遍历Map</h1>\n<%\n    Map<String, Object> map = new HashMap<>();\n    map.put("key1", "北京");\n    map.put("key2", "上海");\n    map.put("key3", "天津");\n    request.setAttribute("cities", map);\n%>\n<%--\n    1. items 遍历的map集合\n    2. var 遍历到的数据\n    3. entry.key 取出key\n    4. entry.value 取出值\n--%>\n<c:forEach items="${requestScope.cities}" var="city">\n    城市信息: ${city.key}--${city.value}<br/>\n</c:forEach>\n<hr/>\n<h1>第4种遍历方式：遍历List</h1>\n<%\n    List<Monster> monsters = new ArrayList<>();\n    monsters.add(new Monster(100, "小妖怪", "巡山的"));\n    monsters.add(new Monster(200, "大妖怪", "做饭的"));\n    monsters.add(new Monster(300, "老妖怪", "打扫位置的"));\n    request.setAttribute("monsters", monsters);\n%>\n<%--\n    items 表示遍历的集合\n    var 表示遍历到的数据\n    begin 表示遍历的开始索引值 ,从0开始计算\n    end 表示结束的索引值\n    step 属性表示遍历的步长值\n    varStatus 属性表示当前遍历到的数据的状态,可以得到step,begin,end等属性值\n    //老师提示, 对于jstl标签，能看懂，会使用即可\n--%>\n<c:forEach items="${requestScope.monsters}" var="monster">\n    妖怪的信息: ${monster.id}-${monster.name}-${monster.skill}<br/>\n</c:forEach>\n</body>\n</html>\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);